{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Faker # Faker is a PHP library that generates fake data for you. Whether you need to bootstrap your database, create good-looking XML documents, fill-in your persistence to stress test it, or anonymize data taken from a production service, Faker is for you. It's heavily inspired by Perl's Data::Faker , and by Ruby's Faker . Installation # Faker requires PHP >= 7.1. composer require fakerphp/faker Basic Usage # Autoloading # Faker supports both PSR-0 as PSR-4 autoloaders. // when installed via composer require_once 'vendor/autoload.php'; You can also load Fakers shipped PSR-0 autoloader // load Faker autoloader require_once '/path/to/Faker/src/autoload.php'; alternatively, you can use any other PSR-4 compliant autoloader Create fake data # Use Faker\\Factory::create() to create and initialize a faker generator, which can generate data by calling methods named after the type of data you want. require_once 'vendor/autoload.php'; // use the factory to create a Faker\\Generator instance $faker = Faker\\Factory::create(); // generate data by calling methods echo $faker->name(); // 'Vince Sporer' echo $faker->email(); // 'walter.sophia@hotmail.com' echo $faker->text(); // 'Numquam ut mollitia at consequuntur inventore dolorem.' Each call to $faker->name() yields a different (random) result. This is because Faker uses __call() magic, and forwards Faker\\Generator->$method() calls to Faker\\Generator->format($method, $attributes) . for ($i = 0; $i < 3; $i++) { echo $faker->name() . \"\\n\"; } // 'Cyrus Boyle' // 'Alena Cummerata' // 'Orlo Bergstrom' Modifiers # Faker provides three special providers, unique() , optional() , and valid() , to be called before any provider. // unique() forces providers to return unique values $values = []; for ($i = 0; $i < 10; $i++) { // get a random digit, but always a new one, to avoid duplicates $values []= $faker->unique()->randomDigit(); } print_r($values); // [4, 1, 8, 5, 0, 2, 6, 9, 7, 3] // providers with a limited range will throw an exception when no new unique value can be generated $values = []; try { for ($i = 0; $i < 10; $i++) { $values []= $faker->unique()->randomDigitNotNull(); } } catch (\\OverflowException $e) { echo \"There are only 9 unique digits not null, Faker can't generate 10 of them!\"; } // you can reset the unique modifier for all providers by passing true as first argument $faker->unique($reset = true)->randomDigitNotNull(); // will not throw OverflowException since unique() was reset // tip: unique() keeps one array of values per provider // optional() sometimes bypasses the provider to return a default value instead (which defaults to NULL) $values = []; for ($i = 0; $i < 10; $i++) { // get a random digit, but also null sometimes $values []= $faker->optional()->randomDigit(); } print_r($values); // [1, 4, null, 9, 5, null, null, 4, 6, null] // optional() accepts a weight argument to specify the probability of receiving the default value. // 0 will always return the default value; 1.0 will always return the provider. Default weight is 0.5 (50% chance). // Please note that the weight can be provided as float (0 / 1.0) or int (0 / 100) // As float $faker->optional($weight = 0.1)->randomDigit(); // 90% chance of NULL $faker->optional($weight = 0.9)->randomDigit(); // 10% chance of NULL // As int $faker->optional($weight = 10)->randomDigit; // 90% chance of NULL $faker->optional($weight = 100)->randomDigit; // 0% chance of NULL // optional() accepts a default argument to specify the default value to return. // Defaults to NULL. $faker->optional($weight = 0.5, $default = false)->randomDigit(); // 50% chance of FALSE $faker->optional($weight = 0.9, $default = 'abc')->word(); // 10% chance of 'abc' // valid() only accepts valid values according to the passed validator functions $values = []; $evenValidator = function($digit) { return $digit % 2 === 0; }; for ($i = 0; $i < 10; $i++) { $values []= $faker->valid($evenValidator)->randomDigit(); } print_r($values); // [0, 4, 8, 4, 2, 6, 0, 8, 8, 6] // just like unique(), valid() throws an overflow exception when it can't generate a valid value $values = []; try { $faker->valid($evenValidator)->randomElement([1, 3, 5, 7, 9]); } catch (\\OverflowException $e) { echo \"Can't pick an even number in that set!\"; } If you would like to use a modifier with a value not generated by Faker, use the passthrough() method. passthrough() simply returns whatever value it was given. $faker->optional()->passthrough(mt_rand(5, 15)); Localization # Faker\\Factory can take a locale as an argument, to return localized data. If no localized provider is found, the factory falls back to the default locale (en_US). // create a French faker $faker = Faker\\Factory::create('fr_FR'); for ($i = 0; $i < 3; $i++) { echo $faker->name() . \"\\n\"; } // Luce du Coulon // Auguste Dupont // Roger Le Voisin You can check available Faker locales in the source code, under the Provider directory . The localization of Faker is an ongoing process, for which we need your help. Don't hesitate to create localized providers to your own locale and submit a PR! Seeding the Generator # You may want to always get the same generated data - for instance when using Faker for unit testing purposes. The generator offers a seed() method, which seeds the random number generator. Calling the same script twice with the same seed produces the same results. $faker = Faker\\Factory::create(); $faker->seed(1234); echo $faker->name(); // 'Jess Mraz I'; Tip DateTime formatters won't reproduce the same fake data if you don't fix the $max value: // even when seeded, this line will return different results because $max varies $faker->dateTime(); // equivalent to $faker->dateTime($max = 'now') // make sure you fix the $max parameter $faker->dateTime('2014-02-25 08:37:17'); // will return always the same date when seeded Tip Formatters won't reproduce the same fake data if you use the rand() php function. Use $faker or mt_rand() instead: // bad $faker->realText(rand(10, 20)); // good $faker->realText($faker->numberBetween(10, 20)); Faker Internals: Understanding Providers # A Faker\\Generator alone can't do much generation. It needs Faker\\Provider objects to delegate the data generation to them. Faker\\Factory::create() actually creates a Faker\\Generator bundled with the default providers. Here is what happens under the hood: $faker = new Faker\\Generator(); $faker->addProvider(new Faker\\Provider\\en_US\\Person($faker)); $faker->addProvider(new Faker\\Provider\\en_US\\Address($faker)); $faker->addProvider(new Faker\\Provider\\en_US\\PhoneNumber($faker)); $faker->addProvider(new Faker\\Provider\\en_US\\Company($faker)); $faker->addProvider(new Faker\\Provider\\Lorem($faker)); $faker->addProvider(new Faker\\Provider\\Internet($faker)); Whenever you try to access a property on the $faker object, the generator looks for a method with the same name in all the providers attached to it. For instance, calling $faker->name triggers a call to Faker\\Provider\\Person::name() . And since Faker starts with the last provider, you can easily override existing formatters: just add a provider containing methods named after the formatters you want to override. That means that you can easily add your own providers to a Faker\\Generator instance. A provider is usually a class extending \\Faker\\Provider\\Base . This parent class allows you to use methods like lexify() or randomNumber() ; it also gives you access to formatters of other providers, through the protected $generator property. The new formatters are the public methods of the provider class. Here is an example provider for populating Book data: namespace Faker\\Provider; class Book extends \\Faker\\Provider\\Base { public function title($nbWords = 5) { $sentence = $this->generator->sentence($nbWords); return substr($sentence, 0, strlen($sentence) - 1); } public function ISBN() { return $this->generator->ean13(); } } To register this provider, just add a new instance of \\Faker\\Provider\\Book to an existing generator: $faker->addProvider(new \\Faker\\Provider\\Book($faker)); Now you can use the two new formatters like any other Faker formatter: $book = new Book(); $book->setTitle($faker->title()); $book->setISBN($faker->ISBN()); $book->setSummary($faker->text()); $book->setPrice($faker->randomNumber(2)); Tip A provider can also be a Plain Old PHP Object. In that case, all the public methods of the provider become available to the generator. Language specific formatters # Supported locales can be found under the \"Locales\" header on the left. Misnamed locales # Current name Correct name at_AT de_AT zh_CN zh_Hans_CN zh_TW zh_Hant_TW Source: https://www.localeplanet.com/icu/ License # Faker is released under the MIT License. See the bundled LICENSE file for details.","title":"Faker"},{"location":"#faker","text":"Faker is a PHP library that generates fake data for you. Whether you need to bootstrap your database, create good-looking XML documents, fill-in your persistence to stress test it, or anonymize data taken from a production service, Faker is for you. It's heavily inspired by Perl's Data::Faker , and by Ruby's Faker .","title":"Faker"},{"location":"#installation","text":"Faker requires PHP >= 7.1. composer require fakerphp/faker","title":"Installation"},{"location":"#basic-usage","text":"","title":"Basic Usage"},{"location":"#autoloading","text":"Faker supports both PSR-0 as PSR-4 autoloaders. // when installed via composer require_once 'vendor/autoload.php'; You can also load Fakers shipped PSR-0 autoloader // load Faker autoloader require_once '/path/to/Faker/src/autoload.php'; alternatively, you can use any other PSR-4 compliant autoloader","title":"Autoloading"},{"location":"#create-fake-data","text":"Use Faker\\Factory::create() to create and initialize a faker generator, which can generate data by calling methods named after the type of data you want. require_once 'vendor/autoload.php'; // use the factory to create a Faker\\Generator instance $faker = Faker\\Factory::create(); // generate data by calling methods echo $faker->name(); // 'Vince Sporer' echo $faker->email(); // 'walter.sophia@hotmail.com' echo $faker->text(); // 'Numquam ut mollitia at consequuntur inventore dolorem.' Each call to $faker->name() yields a different (random) result. This is because Faker uses __call() magic, and forwards Faker\\Generator->$method() calls to Faker\\Generator->format($method, $attributes) . for ($i = 0; $i < 3; $i++) { echo $faker->name() . \"\\n\"; } // 'Cyrus Boyle' // 'Alena Cummerata' // 'Orlo Bergstrom'","title":"Create fake data"},{"location":"#modifiers","text":"Faker provides three special providers, unique() , optional() , and valid() , to be called before any provider. // unique() forces providers to return unique values $values = []; for ($i = 0; $i < 10; $i++) { // get a random digit, but always a new one, to avoid duplicates $values []= $faker->unique()->randomDigit(); } print_r($values); // [4, 1, 8, 5, 0, 2, 6, 9, 7, 3] // providers with a limited range will throw an exception when no new unique value can be generated $values = []; try { for ($i = 0; $i < 10; $i++) { $values []= $faker->unique()->randomDigitNotNull(); } } catch (\\OverflowException $e) { echo \"There are only 9 unique digits not null, Faker can't generate 10 of them!\"; } // you can reset the unique modifier for all providers by passing true as first argument $faker->unique($reset = true)->randomDigitNotNull(); // will not throw OverflowException since unique() was reset // tip: unique() keeps one array of values per provider // optional() sometimes bypasses the provider to return a default value instead (which defaults to NULL) $values = []; for ($i = 0; $i < 10; $i++) { // get a random digit, but also null sometimes $values []= $faker->optional()->randomDigit(); } print_r($values); // [1, 4, null, 9, 5, null, null, 4, 6, null] // optional() accepts a weight argument to specify the probability of receiving the default value. // 0 will always return the default value; 1.0 will always return the provider. Default weight is 0.5 (50% chance). // Please note that the weight can be provided as float (0 / 1.0) or int (0 / 100) // As float $faker->optional($weight = 0.1)->randomDigit(); // 90% chance of NULL $faker->optional($weight = 0.9)->randomDigit(); // 10% chance of NULL // As int $faker->optional($weight = 10)->randomDigit; // 90% chance of NULL $faker->optional($weight = 100)->randomDigit; // 0% chance of NULL // optional() accepts a default argument to specify the default value to return. // Defaults to NULL. $faker->optional($weight = 0.5, $default = false)->randomDigit(); // 50% chance of FALSE $faker->optional($weight = 0.9, $default = 'abc')->word(); // 10% chance of 'abc' // valid() only accepts valid values according to the passed validator functions $values = []; $evenValidator = function($digit) { return $digit % 2 === 0; }; for ($i = 0; $i < 10; $i++) { $values []= $faker->valid($evenValidator)->randomDigit(); } print_r($values); // [0, 4, 8, 4, 2, 6, 0, 8, 8, 6] // just like unique(), valid() throws an overflow exception when it can't generate a valid value $values = []; try { $faker->valid($evenValidator)->randomElement([1, 3, 5, 7, 9]); } catch (\\OverflowException $e) { echo \"Can't pick an even number in that set!\"; } If you would like to use a modifier with a value not generated by Faker, use the passthrough() method. passthrough() simply returns whatever value it was given. $faker->optional()->passthrough(mt_rand(5, 15));","title":"Modifiers"},{"location":"#localization","text":"Faker\\Factory can take a locale as an argument, to return localized data. If no localized provider is found, the factory falls back to the default locale (en_US). // create a French faker $faker = Faker\\Factory::create('fr_FR'); for ($i = 0; $i < 3; $i++) { echo $faker->name() . \"\\n\"; } // Luce du Coulon // Auguste Dupont // Roger Le Voisin You can check available Faker locales in the source code, under the Provider directory . The localization of Faker is an ongoing process, for which we need your help. Don't hesitate to create localized providers to your own locale and submit a PR!","title":"Localization"},{"location":"#seeding-the-generator","text":"You may want to always get the same generated data - for instance when using Faker for unit testing purposes. The generator offers a seed() method, which seeds the random number generator. Calling the same script twice with the same seed produces the same results. $faker = Faker\\Factory::create(); $faker->seed(1234); echo $faker->name(); // 'Jess Mraz I'; Tip DateTime formatters won't reproduce the same fake data if you don't fix the $max value: // even when seeded, this line will return different results because $max varies $faker->dateTime(); // equivalent to $faker->dateTime($max = 'now') // make sure you fix the $max parameter $faker->dateTime('2014-02-25 08:37:17'); // will return always the same date when seeded Tip Formatters won't reproduce the same fake data if you use the rand() php function. Use $faker or mt_rand() instead: // bad $faker->realText(rand(10, 20)); // good $faker->realText($faker->numberBetween(10, 20));","title":"Seeding the Generator"},{"location":"#faker-internals-understanding-providers","text":"A Faker\\Generator alone can't do much generation. It needs Faker\\Provider objects to delegate the data generation to them. Faker\\Factory::create() actually creates a Faker\\Generator bundled with the default providers. Here is what happens under the hood: $faker = new Faker\\Generator(); $faker->addProvider(new Faker\\Provider\\en_US\\Person($faker)); $faker->addProvider(new Faker\\Provider\\en_US\\Address($faker)); $faker->addProvider(new Faker\\Provider\\en_US\\PhoneNumber($faker)); $faker->addProvider(new Faker\\Provider\\en_US\\Company($faker)); $faker->addProvider(new Faker\\Provider\\Lorem($faker)); $faker->addProvider(new Faker\\Provider\\Internet($faker)); Whenever you try to access a property on the $faker object, the generator looks for a method with the same name in all the providers attached to it. For instance, calling $faker->name triggers a call to Faker\\Provider\\Person::name() . And since Faker starts with the last provider, you can easily override existing formatters: just add a provider containing methods named after the formatters you want to override. That means that you can easily add your own providers to a Faker\\Generator instance. A provider is usually a class extending \\Faker\\Provider\\Base . This parent class allows you to use methods like lexify() or randomNumber() ; it also gives you access to formatters of other providers, through the protected $generator property. The new formatters are the public methods of the provider class. Here is an example provider for populating Book data: namespace Faker\\Provider; class Book extends \\Faker\\Provider\\Base { public function title($nbWords = 5) { $sentence = $this->generator->sentence($nbWords); return substr($sentence, 0, strlen($sentence) - 1); } public function ISBN() { return $this->generator->ean13(); } } To register this provider, just add a new instance of \\Faker\\Provider\\Book to an existing generator: $faker->addProvider(new \\Faker\\Provider\\Book($faker)); Now you can use the two new formatters like any other Faker formatter: $book = new Book(); $book->setTitle($faker->title()); $book->setISBN($faker->ISBN()); $book->setSummary($faker->text()); $book->setPrice($faker->randomNumber(2)); Tip A provider can also be a Plain Old PHP Object. In that case, all the public methods of the provider become available to the generator.","title":"Faker Internals: Understanding Providers"},{"location":"#language-specific-formatters","text":"Supported locales can be found under the \"Locales\" header on the left.","title":"Language specific formatters"},{"location":"#misnamed-locales","text":"Current name Correct name at_AT de_AT zh_CN zh_Hans_CN zh_TW zh_Hant_TW Source: https://www.localeplanet.com/icu/","title":"Misnamed locales"},{"location":"#license","text":"Faker is released under the MIT License. See the bundled LICENSE file for details.","title":"License"},{"location":"formatters/","text":"Available Formatters # Each of the generator properties (like name , address , and lorem ) are called \"formatters\". A faker generator has many of them, packaged in \"providers\". Here is a list of the bundled formatters in the default locale. In all examples, a Faker instance is made using the en_US default locale. $faker = Faker\\Factory::create(); Faker\\Provider\\en_US\\Person # title($gender = null|'male'|'female') // 'Ms.' titleMale() // 'Mr.' titleFemale() // 'Ms.' suffix() // 'Jr.' name($gender = null|'male'|'female') // 'Dr. Zane Stroman' firstName($gender = null|'male'|'female') // 'Maynard' firstNameMale() // 'Maynard' firstNameFemale() // 'Rachel' lastName() // 'Zulauf' Faker\\Provider\\en_US\\Address # cityPrefix() // 'Lake' secondaryAddress() // 'Suite 961' state() // 'NewMexico' stateAbbr() // 'OH' citySuffix() // 'borough' streetSuffix() // 'Keys' buildingNumber() // '484' city() // 'West Judge' streetName() // 'Keegan Trail' streetAddress() // '439 Karley Loaf Suite 897' postcode() // '17916' address() // '8888 Cummings Vista Apt. 101, Susanbury, NY 95473' country() // 'Falkland Islands (Malvinas)' latitude($min = -90, $max = 90) // 77.147489 longitude($min = -180, $max = 180) // 86.211205 Faker\\Provider\\en_US\\PhoneNumber # phoneNumber() // '827-986-5852' phoneNumberWithExtension() // '201-886-0269 x3767' tollFreePhoneNumber() // '(888) 937-7238' e164PhoneNumber() // '+27113456789' Faker\\Provider\\en_US\\Company # catchPhrase() // 'Monitored regional contingency' bs() // 'e-enable robust architectures' company() // 'Bogan-Treutel' companySuffix() // 'and Sons' jobTitle() // 'Cashier' Faker\\Provider\\en_US\\Text # realText($maxNbChars = 200, $indexSize = 2) // \"And yet I wish you could manage it?) 'And what are they made of?' Alice asked in a shrill, passionate voice. 'Would YOU like cats if you were never even spoke to Time!' 'Perhaps not,' Alice replied.\" realTextBetween($minNbChars = 160, $maxNbChars = 200, $indexSize = 2) // \"VERY short remarks, and she ran across the garden, and I had not long to doubt, for the end of the bottle was NOT marked 'poison,' it is right?' 'In my youth,' Father William replied to his ear.\"","title":"Available Formatters"},{"location":"formatters/#available-formatters","text":"Each of the generator properties (like name , address , and lorem ) are called \"formatters\". A faker generator has many of them, packaged in \"providers\". Here is a list of the bundled formatters in the default locale. In all examples, a Faker instance is made using the en_US default locale. $faker = Faker\\Factory::create();","title":"Available Formatters"},{"location":"formatters/#fakerprovideren_usperson","text":"title($gender = null|'male'|'female') // 'Ms.' titleMale() // 'Mr.' titleFemale() // 'Ms.' suffix() // 'Jr.' name($gender = null|'male'|'female') // 'Dr. Zane Stroman' firstName($gender = null|'male'|'female') // 'Maynard' firstNameMale() // 'Maynard' firstNameFemale() // 'Rachel' lastName() // 'Zulauf'","title":"Faker\\Provider\\en_US\\Person"},{"location":"formatters/#fakerprovideren_usaddress","text":"cityPrefix() // 'Lake' secondaryAddress() // 'Suite 961' state() // 'NewMexico' stateAbbr() // 'OH' citySuffix() // 'borough' streetSuffix() // 'Keys' buildingNumber() // '484' city() // 'West Judge' streetName() // 'Keegan Trail' streetAddress() // '439 Karley Loaf Suite 897' postcode() // '17916' address() // '8888 Cummings Vista Apt. 101, Susanbury, NY 95473' country() // 'Falkland Islands (Malvinas)' latitude($min = -90, $max = 90) // 77.147489 longitude($min = -180, $max = 180) // 86.211205","title":"Faker\\Provider\\en_US\\Address"},{"location":"formatters/#fakerprovideren_usphonenumber","text":"phoneNumber() // '827-986-5852' phoneNumberWithExtension() // '201-886-0269 x3767' tollFreePhoneNumber() // '(888) 937-7238' e164PhoneNumber() // '+27113456789'","title":"Faker\\Provider\\en_US\\PhoneNumber"},{"location":"formatters/#fakerprovideren_uscompany","text":"catchPhrase() // 'Monitored regional contingency' bs() // 'e-enable robust architectures' company() // 'Bogan-Treutel' companySuffix() // 'and Sons' jobTitle() // 'Cashier'","title":"Faker\\Provider\\en_US\\Company"},{"location":"formatters/#fakerprovideren_ustext","text":"realText($maxNbChars = 200, $indexSize = 2) // \"And yet I wish you could manage it?) 'And what are they made of?' Alice asked in a shrill, passionate voice. 'Would YOU like cats if you were never even spoke to Time!' 'Perhaps not,' Alice replied.\" realTextBetween($minNbChars = 160, $maxNbChars = 200, $indexSize = 2) // \"VERY short remarks, and she ran across the garden, and I had not long to doubt, for the end of the bottle was NOT marked 'poison,' it is right?' 'In my youth,' Father William replied to his ear.\"","title":"Faker\\Provider\\en_US\\Text"},{"location":"orm/","text":"ORM Integration # Faker provides adapters for Object-Relational and Object-Document Mappers (currently, Propel , Doctrine2 , CakePHP , Spot2 , Mandango and Eloquent are supported). These adapters ease the population of databases through the Entity classes provided by an ORM library (or the population of document stores using Document classes provided by an ODM library). To populate entities, create a new populator class (using a generator instance as parameter), then list the class and number of all the entities that must be generated. To launch the actual data population, call the execute() method. Note that some of the populators could require additional parameters. As example the doctrine populator has an option to specify its batchSize on how often it will flush the UnitOfWork to the database. Here is an example showing how to populate 5 Author and 10 Book objects: $generator = \\Faker\\Factory::create(); $populator = new \\Faker\\ORM\\Propel\\Populator($generator); $populator->addEntity('Author', 5); $populator->addEntity('Book', 10); $insertedPKs = $populator->execute(); The populator uses name and column type guessers to populate each column with relevant data. For instance, Faker populates a column named first_name using the firstName formatter, and a column with a TIMESTAMP type using the dateTime formatter. The resulting entities are therefore coherent. If Faker misinterprets a column name, you can still specify a custom closure to be used for populating a particular column, using the third argument to addEntity() : $populator->addEntity('Book', 5, [ 'ISBN' => function() use ($generator) { return $generator->ean13(); } ]); In this example, Faker will guess a formatter for all columns except ISBN , for which the given anonymous function will be used. Tip To ignore some columns, specify null for the column names in the third argument of addEntity() . This is usually necessary for columns added by a behavior: $populator->addEntity('Book', 5, [ 'CreatedAt' => null, 'UpdatedAt' => null, ]); Of course, Faker does not populate auto-incremented primary keys. In addition, Faker\\ORM\\Propel\\Populator::execute() returns the list of inserted PKs, indexed by class: print_r($insertedPKs); // [ // 'Author' => [34, 35, 36, 37, 38], // 'Book' => [456, 457, 458, 459, 470, 471, 472, 473, 474, 475], // ] Note Due to the fact that Faker returns all the primary keys inserted, the memory consumption will go up drastically when you do batch inserts due to the big list of data. In the previous example, the Book and Author models share a relationship. Since Author entities are populated first, Faker is smart enough to relate the populated Book entities to one of the populated Author entities. Lastly, if you want to execute an arbitrary function on an entity before insertion, use the fourth argument of the addEntity() method: $populator->addEntity('Book', 5, [], [ function($book) { $book->publish(); }, ]);","title":"ORM Integration"},{"location":"orm/#orm-integration","text":"Faker provides adapters for Object-Relational and Object-Document Mappers (currently, Propel , Doctrine2 , CakePHP , Spot2 , Mandango and Eloquent are supported). These adapters ease the population of databases through the Entity classes provided by an ORM library (or the population of document stores using Document classes provided by an ODM library). To populate entities, create a new populator class (using a generator instance as parameter), then list the class and number of all the entities that must be generated. To launch the actual data population, call the execute() method. Note that some of the populators could require additional parameters. As example the doctrine populator has an option to specify its batchSize on how often it will flush the UnitOfWork to the database. Here is an example showing how to populate 5 Author and 10 Book objects: $generator = \\Faker\\Factory::create(); $populator = new \\Faker\\ORM\\Propel\\Populator($generator); $populator->addEntity('Author', 5); $populator->addEntity('Book', 10); $insertedPKs = $populator->execute(); The populator uses name and column type guessers to populate each column with relevant data. For instance, Faker populates a column named first_name using the firstName formatter, and a column with a TIMESTAMP type using the dateTime formatter. The resulting entities are therefore coherent. If Faker misinterprets a column name, you can still specify a custom closure to be used for populating a particular column, using the third argument to addEntity() : $populator->addEntity('Book', 5, [ 'ISBN' => function() use ($generator) { return $generator->ean13(); } ]); In this example, Faker will guess a formatter for all columns except ISBN , for which the given anonymous function will be used. Tip To ignore some columns, specify null for the column names in the third argument of addEntity() . This is usually necessary for columns added by a behavior: $populator->addEntity('Book', 5, [ 'CreatedAt' => null, 'UpdatedAt' => null, ]); Of course, Faker does not populate auto-incremented primary keys. In addition, Faker\\ORM\\Propel\\Populator::execute() returns the list of inserted PKs, indexed by class: print_r($insertedPKs); // [ // 'Author' => [34, 35, 36, 37, 38], // 'Book' => [456, 457, 458, 459, 470, 471, 472, 473, 474, 475], // ] Note Due to the fact that Faker returns all the primary keys inserted, the memory consumption will go up drastically when you do batch inserts due to the big list of data. In the previous example, the Book and Author models share a relationship. Since Author entities are populated first, Faker is smart enough to relate the populated Book entities to one of the populated Author entities. Lastly, if you want to execute an arbitrary function on an entity before insertion, use the fourth argument of the addEntity() method: $populator->addEntity('Book', 5, [], [ function($book) { $book->publish(); }, ]);","title":"ORM Integration"},{"location":"third-party/","text":"Third-Party Libraries # Symfony bundles: willdurand/faker-bundle : Put the awesome Faker library into the Symfony2 DIC and populate your database with fake data. hautelook/alice-bundle , h4cc/alice-fixtures-bundle : Bundles for using nelmio/alice and Faker with data fixtures. Able to use Doctrine ORM as well as Doctrine MongoDB ODM. league/factory-muffin : enable the rapid creation of objects (PHP port of factory-girl) emanueleminotto/faker-placehold-it-provider : Generate images using placehold.it frequenc1/newage-ipsum : A new aged ipsum provider for the faker library inspired by http://sebpearce.com/bullshit/ denheck/faker-context : Behat context using Faker to generate testdata swekaj/cron-expression-generator : Faker provider for generating random, valid cron expressions. nelmio/alice : Fixtures/object generator with a yaml DSL that can use Faker as data generator. ravage84/cakephp-fake-seeder A CakePHP 2.x shell to seed your database with fake and/or fixed data. bheller/images-generator : An image generator provider using GD for placeholder type pictures pattern-lab/plugin-faker : Pattern Lab is a Styleguide, Component Library, and Prototyping tool. This creates unique content each time Pattern Lab is generated. guidocella/eloquent-populator : Adapter for Laravel's Eloquent ORM. jzonta/faker-restaurant : Faker for Food and Beverage names generate aalaap/faker-youtube : Faker for YouTube URLs in various formats pelmered/fake-car : Faker for cars and car data bluemmb/faker-picsum-photos-provider : Generate images using picsum.photos xvladqt/faker-lorem-flickr : Generate images using loremflickr.com ottaviano/faker-gravatar : Generate avatars using Gravatar finwe/phpstan-faker : PHPStan extension for Faker methods","title":"Third-Party Libraries"},{"location":"third-party/#third-party-libraries","text":"Symfony bundles: willdurand/faker-bundle : Put the awesome Faker library into the Symfony2 DIC and populate your database with fake data. hautelook/alice-bundle , h4cc/alice-fixtures-bundle : Bundles for using nelmio/alice and Faker with data fixtures. Able to use Doctrine ORM as well as Doctrine MongoDB ODM. league/factory-muffin : enable the rapid creation of objects (PHP port of factory-girl) emanueleminotto/faker-placehold-it-provider : Generate images using placehold.it frequenc1/newage-ipsum : A new aged ipsum provider for the faker library inspired by http://sebpearce.com/bullshit/ denheck/faker-context : Behat context using Faker to generate testdata swekaj/cron-expression-generator : Faker provider for generating random, valid cron expressions. nelmio/alice : Fixtures/object generator with a yaml DSL that can use Faker as data generator. ravage84/cakephp-fake-seeder A CakePHP 2.x shell to seed your database with fake and/or fixed data. bheller/images-generator : An image generator provider using GD for placeholder type pictures pattern-lab/plugin-faker : Pattern Lab is a Styleguide, Component Library, and Prototyping tool. This creates unique content each time Pattern Lab is generated. guidocella/eloquent-populator : Adapter for Laravel's Eloquent ORM. jzonta/faker-restaurant : Faker for Food and Beverage names generate aalaap/faker-youtube : Faker for YouTube URLs in various formats pelmered/fake-car : Faker for cars and car data bluemmb/faker-picsum-photos-provider : Generate images using picsum.photos xvladqt/faker-lorem-flickr : Generate images using loremflickr.com ottaviano/faker-gravatar : Generate avatars using Gravatar finwe/phpstan-faker : PHPStan extension for Faker methods","title":"Third-Party Libraries"},{"location":"formatters/barcode/","text":"Barcode # ean13 # Generate a random EAN-13 barcode. echo $faker->ean13(); // '5803352818140', '4142935337533' ean8 # Generate a random EAN-8 barcode. echo $faker->ean8(); // '30272446', '00484527' isbn10 # Generate a random ISBN-10 compliant string . echo $faker->isbn10(); // '4250151735', '8395066937' isbn13 # Generate a random ISBN-13 compliant string . echo $faker->isbn13(); // '9786881116078', '9785625528412'","title":"Barcode"},{"location":"formatters/barcode/#barcode","text":"","title":"Barcode"},{"location":"formatters/barcode/#ean13","text":"Generate a random EAN-13 barcode. echo $faker->ean13(); // '5803352818140', '4142935337533'","title":"ean13"},{"location":"formatters/barcode/#ean8","text":"Generate a random EAN-8 barcode. echo $faker->ean8(); // '30272446', '00484527'","title":"ean8"},{"location":"formatters/barcode/#isbn10","text":"Generate a random ISBN-10 compliant string . echo $faker->isbn10(); // '4250151735', '8395066937'","title":"isbn10"},{"location":"formatters/barcode/#isbn13","text":"Generate a random ISBN-13 compliant string . echo $faker->isbn13(); // '9786881116078', '9785625528412'","title":"isbn13"},{"location":"formatters/biased/","text":"Biased # biasedNumberBetween # Generate a random integer , with a bias using a given function. function biasedNumberBetween( int $min = 0, int $max = 100, string $function = 'sqrt' ): int; Examples: echo $faker->biasedNumberBetween(0, 20); // 14, 18, 12 echo $faker->biasedNumberBetween(0, 20, 'log'); // 9, 4, 12","title":"Biased"},{"location":"formatters/biased/#biased","text":"","title":"Biased"},{"location":"formatters/biased/#biasednumberbetween","text":"Generate a random integer , with a bias using a given function. function biasedNumberBetween( int $min = 0, int $max = 100, string $function = 'sqrt' ): int; Examples: echo $faker->biasedNumberBetween(0, 20); // 14, 18, 12 echo $faker->biasedNumberBetween(0, 20, 'log'); // 9, 4, 12","title":"biasedNumberBetween"},{"location":"formatters/color/","text":"Color # hexColor # Generate a random hex color. $faker->hexColor(); // '#ccd578', '#fafa11', '#ea3781' safeHexColor # Generate a random hex color, containing only 16 values per R, G and B. $faker->safeHexColor(); // '#00eecc', '#00ff88', '#00aaee' rgbColorAsArray # Generate a random RGB color, as an array . $faker->rgbColorAsArray(); // [0 => 30, 1 => 22, 2 => 177], [0 => 150, 1 => 55, 2 => 34], [0 => 219, 1 => 253, 2 => 248] rgbColor # Generate a comma-separated RGB color string . $faker->rgbColor(); // '105,224,78', '97,249,98', '24,250,221' rgbCssColor # Generate a CSS-friendly RGB color string . $faker->rgbCssColor(); // 'rgb(9,110,101)', 'rgb(242,133,147)', 'rgb(124,64,0)' rgbaCssColor # Generate a CSS-friendly RGBA (alpha channel) color string . $faker->rgbaCssColor(); // 'rgba(179,65,209,1)', 'rgba(121,53,231,0.4)', 'rgba(161,239,152,0.9)' safeColorName # Generate a CSS-friendly color name. $faker->safeColorName(); // 'white', 'fuchsia', 'purple' colorName # Generate a CSS-friendly color name. $faker->colorName(); // 'SeaGreen', 'Crimson', 'DarkOliveGreen' hslColor # Generate a random HSL color string . $faker->hslColor(); // '87,10,25', '94,24,27', '207,68,84' hslColorAsArray # Generate a random HSL color, as an array . $faker->hslColorAsArray(); // [0 => 311, 1 => 84, 2 => 31], [0 => 283, 1 => 85, 2 => 49], [0 => 57, 1 => 48, 2 => 36]","title":"Color"},{"location":"formatters/color/#color","text":"","title":"Color"},{"location":"formatters/color/#hexcolor","text":"Generate a random hex color. $faker->hexColor(); // '#ccd578', '#fafa11', '#ea3781'","title":"hexColor"},{"location":"formatters/color/#safehexcolor","text":"Generate a random hex color, containing only 16 values per R, G and B. $faker->safeHexColor(); // '#00eecc', '#00ff88', '#00aaee'","title":"safeHexColor"},{"location":"formatters/color/#rgbcolorasarray","text":"Generate a random RGB color, as an array . $faker->rgbColorAsArray(); // [0 => 30, 1 => 22, 2 => 177], [0 => 150, 1 => 55, 2 => 34], [0 => 219, 1 => 253, 2 => 248]","title":"rgbColorAsArray"},{"location":"formatters/color/#rgbcolor","text":"Generate a comma-separated RGB color string . $faker->rgbColor(); // '105,224,78', '97,249,98', '24,250,221'","title":"rgbColor"},{"location":"formatters/color/#rgbcsscolor","text":"Generate a CSS-friendly RGB color string . $faker->rgbCssColor(); // 'rgb(9,110,101)', 'rgb(242,133,147)', 'rgb(124,64,0)'","title":"rgbCssColor"},{"location":"formatters/color/#rgbacsscolor","text":"Generate a CSS-friendly RGBA (alpha channel) color string . $faker->rgbaCssColor(); // 'rgba(179,65,209,1)', 'rgba(121,53,231,0.4)', 'rgba(161,239,152,0.9)'","title":"rgbaCssColor"},{"location":"formatters/color/#safecolorname","text":"Generate a CSS-friendly color name. $faker->safeColorName(); // 'white', 'fuchsia', 'purple'","title":"safeColorName"},{"location":"formatters/color/#colorname","text":"Generate a CSS-friendly color name. $faker->colorName(); // 'SeaGreen', 'Crimson', 'DarkOliveGreen'","title":"colorName"},{"location":"formatters/color/#hslcolor","text":"Generate a random HSL color string . $faker->hslColor(); // '87,10,25', '94,24,27', '207,68,84'","title":"hslColor"},{"location":"formatters/color/#hslcolorasarray","text":"Generate a random HSL color, as an array . $faker->hslColorAsArray(); // [0 => 311, 1 => 84, 2 => 31], [0 => 283, 1 => 85, 2 => 49], [0 => 57, 1 => 48, 2 => 36]","title":"hslColorAsArray"},{"location":"formatters/date-and-time/","text":"Date and Time # Methods accepting a $timezone argument default to date_default_timezone_get() . You can pass a custom timezone string to each method, or define a custom timezone for all time methods at once using $faker::setDefaultTimezone($timezone) . unixTime # Generate an unix time between zero, and the given value. By default, now is used as input. Optionally, a parameter can be supplied containing a DateTime , int or string . echo $faker->unixTime(); // 1605544623, 1025544612 echo $faker->unixTime(new DateTime('+3 weeks')); // unix timestamp between 0 and the date 3 weeks from now. dateTime # Generate a DateTime between January 1, 1970, and the given max. By default, now is used as max. Optionally, a parameter can be supplied containing a DateTime , int or string . An optional second parameter can be supplied, with the timezone. echo $faker->dateTime(); // DateTime: August 12, 1991 dateTimeAD # Generate a DateTime between January 1, 0001, and the given max. By default, now is used as max. An optional second parameter can be supplied, with the timezone. echo $faker->dateTimeAD(); // DateTime: September 19, 718 iso8601 # Generate an ISO8601 formatted string between January 1, 0001, and the given max. By default, now is used as max. echo $faker->iso8601(); date # Generate a date string , with a given format and max value. By default, 'Y-m-d' and 'now' are used for the format and maximum value respectively. echo $faker->date(); // '1999-06-09' echo $faker->date('Y_m_d'); // '2011_02_19' time # Generate a time string , with a given format and max value. By default, H:i:s' and now are used for the format and maximum value respectively. echo $faker->time(); // '12:02:50' echo $faker->time('H_i_s'); // '20_49_12' dateTimeBetween # Generate a DateTime between two dates. By default, -30 years and now are used. An optional third parameter can be supplied, with the timezone. echo $faker->dateTimeBetween(); // a date between -30 years ago, and now echo $faker->dateTimeBetween('-1 week', '+1 week'); // a date between -1 week ago, and 1 week from now dateTimeInInterval # Generate a DateTime between a date and an interval from that date. By default, the date is set to -30 years , and the interval is set to +5 days . An optional third parameter can be supplied, with the timezone. echo $faker->dateTimeInInterval(); // a date between -30 years ago, and -30 years + 5 days echo $faker->dateTimeInInterval('-1 week', '+3 days'); // a date between -1 week ago, and -1 week + 3 days dateTimeThisCentury # Generate a DateTime that is within the current century. An optional $max value can be supplied, by default this is set to now . An optional second parameter can be supplied, with the timezone. echo $faker->dateTimeThisCentury(); // a date somewhere in this century echo $faker->dateTimeThisCentury('+8 years'); // a date somewhere in this century, with an upper bound of +8 years dateTimeThisDecade # Generate a DateTime that is within the current decade. An optional $max value can be supplied, by default this is set to now . An optional second parameter can be supplied, with the timezone. echo $faker->dateTimeThisDecade(); // a date somewhere in this decade echo $faker->dateTimeThisDecade('+2 years'); // a date somewhere in this decade, with an upper bound of +2 years dateTimeThisYear # Generate a DateTime that is within the current year. An optional $max value can be supplied, by default this is set to now . An optional second parameter can be supplied, with the timezone. echo $faker->dateTimeThisYear(); // a date somewhere in this year echo $faker->dateTimeThisYear('+2 months'); // a date somewhere in this year, with an upper bound of +2 months dateTimeThisMonth # Generate a DateTime that is within the current month. An optional $max value can be supplied, by default this is set to now . An optional second parameter can be supplied, with the timezone. echo $faker->dateTimeThisMonth(); // a date somewhere in this months echo $faker->dateTimeThisMonth('+12 days'); // a date somewhere in this month, with an upper bound of +12 days amPm # Generate a random DateTime , with a given upper bound, and return the am/pm string value. By default, the upper bound is set to now . echo $faker->amPm(); // 'am' echo $faker->amPm('+2 weeks'); // 'pm' dayOfMonth # Generate a random DateTime , with a given upper bound, and return the day of month string value. By default, the upper bound is set to now . echo $faker->dayOfMonth(); // '24' echo $faker->dayOfMonth('+2 weeks'); // '05' dayOfWeek # Generate a random DateTime , with a given upper bound, and return the day of week string value. By default, the upper bound is set to now . echo $faker->dayOfWeek(); // 'Tuesday' echo $faker->dayOfWeek('+2 weeks'); // 'Friday' month # Generate a random DateTime , with a given upper bound, and return the month's number string value. By default, the upper bound is set to now . echo $faker->month(); // '9' echo $faker->month('+10 weeks'); // '7' monthName # Generate a random DateTime , with a given upper bound, and return the month's name string value. By default, the upper bound is set to now . echo $faker->monthName(); // 'September' echo $faker->monthName('+10 weeks'); // 'April' year # Generate a random DateTime , with a given upper bound, and return the year's string value. By default, the upper bound is set to now . echo $faker->year(); // '1998' echo $faker->year('+10 years'); // '2022' century # Generate a random century name. echo $faker->century(); // 'IX', 'XVII', 'II' timezone # Generate a random timezone name. echo $faker->timezone(); // 'Europe/Amsterdam', 'America/Montreal'","title":"Date and Time"},{"location":"formatters/date-and-time/#date-and-time","text":"Methods accepting a $timezone argument default to date_default_timezone_get() . You can pass a custom timezone string to each method, or define a custom timezone for all time methods at once using $faker::setDefaultTimezone($timezone) .","title":"Date and Time"},{"location":"formatters/date-and-time/#unixtime","text":"Generate an unix time between zero, and the given value. By default, now is used as input. Optionally, a parameter can be supplied containing a DateTime , int or string . echo $faker->unixTime(); // 1605544623, 1025544612 echo $faker->unixTime(new DateTime('+3 weeks')); // unix timestamp between 0 and the date 3 weeks from now.","title":"unixTime"},{"location":"formatters/date-and-time/#datetime","text":"Generate a DateTime between January 1, 1970, and the given max. By default, now is used as max. Optionally, a parameter can be supplied containing a DateTime , int or string . An optional second parameter can be supplied, with the timezone. echo $faker->dateTime(); // DateTime: August 12, 1991","title":"dateTime"},{"location":"formatters/date-and-time/#datetimead","text":"Generate a DateTime between January 1, 0001, and the given max. By default, now is used as max. An optional second parameter can be supplied, with the timezone. echo $faker->dateTimeAD(); // DateTime: September 19, 718","title":"dateTimeAD"},{"location":"formatters/date-and-time/#iso8601","text":"Generate an ISO8601 formatted string between January 1, 0001, and the given max. By default, now is used as max. echo $faker->iso8601();","title":"iso8601"},{"location":"formatters/date-and-time/#date","text":"Generate a date string , with a given format and max value. By default, 'Y-m-d' and 'now' are used for the format and maximum value respectively. echo $faker->date(); // '1999-06-09' echo $faker->date('Y_m_d'); // '2011_02_19'","title":"date"},{"location":"formatters/date-and-time/#time","text":"Generate a time string , with a given format and max value. By default, H:i:s' and now are used for the format and maximum value respectively. echo $faker->time(); // '12:02:50' echo $faker->time('H_i_s'); // '20_49_12'","title":"time"},{"location":"formatters/date-and-time/#datetimebetween","text":"Generate a DateTime between two dates. By default, -30 years and now are used. An optional third parameter can be supplied, with the timezone. echo $faker->dateTimeBetween(); // a date between -30 years ago, and now echo $faker->dateTimeBetween('-1 week', '+1 week'); // a date between -1 week ago, and 1 week from now","title":"dateTimeBetween"},{"location":"formatters/date-and-time/#datetimeininterval","text":"Generate a DateTime between a date and an interval from that date. By default, the date is set to -30 years , and the interval is set to +5 days . An optional third parameter can be supplied, with the timezone. echo $faker->dateTimeInInterval(); // a date between -30 years ago, and -30 years + 5 days echo $faker->dateTimeInInterval('-1 week', '+3 days'); // a date between -1 week ago, and -1 week + 3 days","title":"dateTimeInInterval"},{"location":"formatters/date-and-time/#datetimethiscentury","text":"Generate a DateTime that is within the current century. An optional $max value can be supplied, by default this is set to now . An optional second parameter can be supplied, with the timezone. echo $faker->dateTimeThisCentury(); // a date somewhere in this century echo $faker->dateTimeThisCentury('+8 years'); // a date somewhere in this century, with an upper bound of +8 years","title":"dateTimeThisCentury"},{"location":"formatters/date-and-time/#datetimethisdecade","text":"Generate a DateTime that is within the current decade. An optional $max value can be supplied, by default this is set to now . An optional second parameter can be supplied, with the timezone. echo $faker->dateTimeThisDecade(); // a date somewhere in this decade echo $faker->dateTimeThisDecade('+2 years'); // a date somewhere in this decade, with an upper bound of +2 years","title":"dateTimeThisDecade"},{"location":"formatters/date-and-time/#datetimethisyear","text":"Generate a DateTime that is within the current year. An optional $max value can be supplied, by default this is set to now . An optional second parameter can be supplied, with the timezone. echo $faker->dateTimeThisYear(); // a date somewhere in this year echo $faker->dateTimeThisYear('+2 months'); // a date somewhere in this year, with an upper bound of +2 months","title":"dateTimeThisYear"},{"location":"formatters/date-and-time/#datetimethismonth","text":"Generate a DateTime that is within the current month. An optional $max value can be supplied, by default this is set to now . An optional second parameter can be supplied, with the timezone. echo $faker->dateTimeThisMonth(); // a date somewhere in this months echo $faker->dateTimeThisMonth('+12 days'); // a date somewhere in this month, with an upper bound of +12 days","title":"dateTimeThisMonth"},{"location":"formatters/date-and-time/#ampm","text":"Generate a random DateTime , with a given upper bound, and return the am/pm string value. By default, the upper bound is set to now . echo $faker->amPm(); // 'am' echo $faker->amPm('+2 weeks'); // 'pm'","title":"amPm"},{"location":"formatters/date-and-time/#dayofmonth","text":"Generate a random DateTime , with a given upper bound, and return the day of month string value. By default, the upper bound is set to now . echo $faker->dayOfMonth(); // '24' echo $faker->dayOfMonth('+2 weeks'); // '05'","title":"dayOfMonth"},{"location":"formatters/date-and-time/#dayofweek","text":"Generate a random DateTime , with a given upper bound, and return the day of week string value. By default, the upper bound is set to now . echo $faker->dayOfWeek(); // 'Tuesday' echo $faker->dayOfWeek('+2 weeks'); // 'Friday'","title":"dayOfWeek"},{"location":"formatters/date-and-time/#month","text":"Generate a random DateTime , with a given upper bound, and return the month's number string value. By default, the upper bound is set to now . echo $faker->month(); // '9' echo $faker->month('+10 weeks'); // '7'","title":"month"},{"location":"formatters/date-and-time/#monthname","text":"Generate a random DateTime , with a given upper bound, and return the month's name string value. By default, the upper bound is set to now . echo $faker->monthName(); // 'September' echo $faker->monthName('+10 weeks'); // 'April'","title":"monthName"},{"location":"formatters/date-and-time/#year","text":"Generate a random DateTime , with a given upper bound, and return the year's string value. By default, the upper bound is set to now . echo $faker->year(); // '1998' echo $faker->year('+10 years'); // '2022'","title":"year"},{"location":"formatters/date-and-time/#century","text":"Generate a random century name. echo $faker->century(); // 'IX', 'XVII', 'II'","title":"century"},{"location":"formatters/date-and-time/#timezone","text":"Generate a random timezone name. echo $faker->timezone(); // 'Europe/Amsterdam', 'America/Montreal'","title":"timezone"},{"location":"formatters/file/","text":"File # mimeType # Generate a random MIME-type string . $faker->mimeType(); // 'application/vnd.ms-artgalry', 'application/mods+xml', 'video/x-sgi-movie' fileExtension # Generate a random file extension type string . $faker->fileExtension(); // 'deb', 'mp4s', 'uvg' file # Copy a random file from the source directory to the target directory and return the filename / relative path. $faker->file('docs', 'site', true); // 'site/f6df6c74-2884-35c7-b802-6f96cf2ead01.md', 'site/423cfca4-709c-3942-8d66-34b08affd90b.md', 'site/c7a76943-e2cc-3c99-b75b-ac2df15cb3cf.md' $faker->file('docs', 'site', false); // 'c4cdee40-0eee-3172-9bca-bdafbb743c17.md', '88aef77e-040d-39a3-8f88-eca522f759ba.md', 'ecbee0e9-6fad-397b-88fb-d84704c7a71c.md'","title":"File"},{"location":"formatters/file/#file","text":"","title":"File"},{"location":"formatters/file/#mimetype","text":"Generate a random MIME-type string . $faker->mimeType(); // 'application/vnd.ms-artgalry', 'application/mods+xml', 'video/x-sgi-movie'","title":"mimeType"},{"location":"formatters/file/#fileextension","text":"Generate a random file extension type string . $faker->fileExtension(); // 'deb', 'mp4s', 'uvg'","title":"fileExtension"},{"location":"formatters/file/#file_1","text":"Copy a random file from the source directory to the target directory and return the filename / relative path. $faker->file('docs', 'site', true); // 'site/f6df6c74-2884-35c7-b802-6f96cf2ead01.md', 'site/423cfca4-709c-3942-8d66-34b08affd90b.md', 'site/c7a76943-e2cc-3c99-b75b-ac2df15cb3cf.md' $faker->file('docs', 'site', false); // 'c4cdee40-0eee-3172-9bca-bdafbb743c17.md', '88aef77e-040d-39a3-8f88-eca522f759ba.md', 'ecbee0e9-6fad-397b-88fb-d84704c7a71c.md'","title":"file"},{"location":"formatters/html-lorem/","text":"HTML Lorem # htmlLorem # Generate a random HTML string , with a given maximum depth and width. By default, the depth and width are 4 . Depth defines the maximum depth of the body. Width defines the maximum of siblings each element can have. echo $faker->randomHtml(); // '<html><head><title>Laborum doloribus voluptatum vitae quia voluptatum ipsum veritatis.</title></head><body><form action=\"example.org\" method=\"POST\"><label for=\"username\">sit</label><input type=\"text\" id=\"username\"><label for=\"password\">amet</label><input type=\"password\" id=\"password\"></form><div class=\"et\"><span>Numquam magnam.</span><p>Neque facere consequuntur autem quisquam.</p><ul><li>Veritatis sint.</li><li>Et ducimus.</li><li>Veniam accusamus cupiditate.</li><li>Eligendi eum et doloribus.</li><li>Voluptate ipsa dolores est.</li><li>Enim.</li><li>Dignissimos nostrum atque et excepturi.</li><li>Nisi veniam.</li><li>Voluptate nihil labore sapiente.</li><li>Ut.</li><li>Id suscipit.</li></ul><i>Qui tempora minima ad.</i></div></body></html>' echo $faker->randomHtml(1, 1); // '<html><head><title>Architecto ut eius nisi molestiae atque ab.</title></head><body><form action=\"example.net\" method=\"POST\"><label for=\"username\">saepe</label><input type=\"text\" id=\"username\"><label for=\"password\">est</label><input type=\"password\" id=\"password\"></form></body></html>'","title":"HTML Lorem"},{"location":"formatters/html-lorem/#html-lorem","text":"","title":"HTML Lorem"},{"location":"formatters/html-lorem/#htmllorem","text":"Generate a random HTML string , with a given maximum depth and width. By default, the depth and width are 4 . Depth defines the maximum depth of the body. Width defines the maximum of siblings each element can have. echo $faker->randomHtml(); // '<html><head><title>Laborum doloribus voluptatum vitae quia voluptatum ipsum veritatis.</title></head><body><form action=\"example.org\" method=\"POST\"><label for=\"username\">sit</label><input type=\"text\" id=\"username\"><label for=\"password\">amet</label><input type=\"password\" id=\"password\"></form><div class=\"et\"><span>Numquam magnam.</span><p>Neque facere consequuntur autem quisquam.</p><ul><li>Veritatis sint.</li><li>Et ducimus.</li><li>Veniam accusamus cupiditate.</li><li>Eligendi eum et doloribus.</li><li>Voluptate ipsa dolores est.</li><li>Enim.</li><li>Dignissimos nostrum atque et excepturi.</li><li>Nisi veniam.</li><li>Voluptate nihil labore sapiente.</li><li>Ut.</li><li>Id suscipit.</li></ul><i>Qui tempora minima ad.</i></div></body></html>' echo $faker->randomHtml(1, 1); // '<html><head><title>Architecto ut eius nisi molestiae atque ab.</title></head><body><form action=\"example.net\" method=\"POST\"><label for=\"username\">saepe</label><input type=\"text\" id=\"username\"><label for=\"password\">est</label><input type=\"password\" id=\"password\"></form></body></html>'","title":"htmlLorem"},{"location":"formatters/image/","text":"Image # imageUrl # Get a random image URL from placeholder.com . To provide a less verbose explanation of this function, we'll use a function definition here: function imageUrl( int $width = 640, int $height = 480, ?string $category = null, /* used as text on the image */ bool $randomize = true, ?string $word = null, bool $gray = false ): string; Below, a few examples of possible parameter combinations: echo $faker->imageUrl(640, 480, 'animals', true); // 'https://via.placeholder.com/640x480.png/004466?text=animals+omnis' echo $faker->imageUrl(360, 360, 'animals', true, 'cats'); // 'https://via.placeholder.com/360x360.png/00bbcc?text=animals+cats+vero' echo $faker->imageUrl(360, 360, 'animals', true, 'dogs', true); // https://via.placeholder.com/360x360.png/CCCCCC?text=animals+dogs+veniam image # Get a random image from placeholder.com and download it to a directory ( $dir ). The full path of the image is returned as a string . All the parameters are the same as imageUrl . Except an extra first parameter, this defines where the image should be stored. function image( ?string $dir = null, int $width = 640, int $height = 480, ?string $category = null, bool $fullPath = true, bool $randomize = true, ?string $word = null, bool $gray = false ) Below, a few examples of possible parameter combinations: echo $faker->image(null, 640, 480); // '/tmp/309fd63646f6d781848850277c14aef2.png' echo $faker->image(null, 360, 360, 'animals', true); // '/tmp/4d2666e5968e10350428e3ed64de9175.png' echo $faker->image(null, 360, 360, 'animals', true, true, 'cats', true); // '/tmp/9444227f06f0b024a14688ef3b31fe7a.png'","title":"Image"},{"location":"formatters/image/#image","text":"","title":"Image"},{"location":"formatters/image/#imageurl","text":"Get a random image URL from placeholder.com . To provide a less verbose explanation of this function, we'll use a function definition here: function imageUrl( int $width = 640, int $height = 480, ?string $category = null, /* used as text on the image */ bool $randomize = true, ?string $word = null, bool $gray = false ): string; Below, a few examples of possible parameter combinations: echo $faker->imageUrl(640, 480, 'animals', true); // 'https://via.placeholder.com/640x480.png/004466?text=animals+omnis' echo $faker->imageUrl(360, 360, 'animals', true, 'cats'); // 'https://via.placeholder.com/360x360.png/00bbcc?text=animals+cats+vero' echo $faker->imageUrl(360, 360, 'animals', true, 'dogs', true); // https://via.placeholder.com/360x360.png/CCCCCC?text=animals+dogs+veniam","title":"imageUrl"},{"location":"formatters/image/#image_1","text":"Get a random image from placeholder.com and download it to a directory ( $dir ). The full path of the image is returned as a string . All the parameters are the same as imageUrl . Except an extra first parameter, this defines where the image should be stored. function image( ?string $dir = null, int $width = 640, int $height = 480, ?string $category = null, bool $fullPath = true, bool $randomize = true, ?string $word = null, bool $gray = false ) Below, a few examples of possible parameter combinations: echo $faker->image(null, 640, 480); // '/tmp/309fd63646f6d781848850277c14aef2.png' echo $faker->image(null, 360, 360, 'animals', true); // '/tmp/4d2666e5968e10350428e3ed64de9175.png' echo $faker->image(null, 360, 360, 'animals', true, true, 'cats', true); // '/tmp/9444227f06f0b024a14688ef3b31fe7a.png'","title":"image"},{"location":"formatters/internet/","text":"Internet # email # Generate an email address. echo $faker->email(); // 'orval.treutel@blick.com', 'hickle.lavern@erdman.com' safeEmail # Generate a safe email address. echo $faker->safeEmail(); // 'spencer.ricardo@example.com', 'wolf.sabryna@example.org' freeEmail # Generate a free email address (free, as in, free sign-up). echo $faker->freeEmail(); // 'marcelino.hyatt@yahoo.com', 'abby81@gmail.com' companyEmail # Generate a company email. echo $faker->companyEmail(); // 'hschinner@reinger.net', 'paula.blick@hessel.com' freeEmailDomain # Generate a free email domain name. echo $faker->freeEmailDomain(); // 'gmail.com', 'hotmail.com' safeEmailDomain # Generate a safe email domain. echo $faker->safeEmailDomain(); // 'example.net', 'example.org' userName # Generate a username. echo $faker->userName(); // 'ipaucek', 'homenick.alexandre' password # Generate a password, with a given minimum and maximum length. By default, the values 6 and 20 are used for the minimum and maximum respectively. echo $faker->password(); // 'dE1U[G$n4g%-Eie[]rn[', '-YCc1t|NSh)U&j6Z' echo $faker->password(2, 6); // 'GK,M|', '/ZG.' domainName # Generate a domain name. echo $faker->domainName(); // 'toy.com', 'schamberger.biz' domainWord # Generate a domain word. echo $faker->domainWord(); // 'feil', 'wintheiser' tld # Generate a tld (top-level domain). echo $faker->tld(); // 'com', 'org' url # Generate a URL. echo $faker->url(); // 'http://cormier.info/eligendi-rem-omnis-quia.html', 'http://pagac.com/' slug # Generate a slug, with a given amount of words. By default, the amount of words it set to 6. Optionally, a second parameter can be supplied. When false , only slugs with the given amount of words will be generated. echo $faker->slug(); // 'facere-ipsam-sit-aut-ut-dolorem', 'qui-soluta-sed-facilis-est-ratione-dolor-autem' echo $faker->slug(2); // 'et-et-et', 'temporibus-iure' echo $faker->slug(3, false); // 'ipsa-consectetur-est', 'quia-ad-nihil' ipv4 # Generate an IPv4 address. echo $faker->ipv4(); // '90.119.172.201', '84.172.232.19' localIpv4 # Generate an IPv4 address, inside a local subnet. echo $faker->localIpv4(); // '192.168.85.208', '192.168.217.138' ipv6 # Generate an IPv6 address. echo $faker->ipv6(); // 'c3f3:40ed:6d6c:4e8e:746b:887a:4551:42e5', '1c3d:a2cf:80ad:f2b6:7794:4f3f:f9fb:59cf' macAddress # Generate a random MAC address. echo $faker->macAddress(); // '94:00:10:01:58:07', '0E:E1:48:29:2F:E2'","title":"Internet"},{"location":"formatters/internet/#internet","text":"","title":"Internet"},{"location":"formatters/internet/#email","text":"Generate an email address. echo $faker->email(); // 'orval.treutel@blick.com', 'hickle.lavern@erdman.com'","title":"email"},{"location":"formatters/internet/#safeemail","text":"Generate a safe email address. echo $faker->safeEmail(); // 'spencer.ricardo@example.com', 'wolf.sabryna@example.org'","title":"safeEmail"},{"location":"formatters/internet/#freeemail","text":"Generate a free email address (free, as in, free sign-up). echo $faker->freeEmail(); // 'marcelino.hyatt@yahoo.com', 'abby81@gmail.com'","title":"freeEmail"},{"location":"formatters/internet/#companyemail","text":"Generate a company email. echo $faker->companyEmail(); // 'hschinner@reinger.net', 'paula.blick@hessel.com'","title":"companyEmail"},{"location":"formatters/internet/#freeemaildomain","text":"Generate a free email domain name. echo $faker->freeEmailDomain(); // 'gmail.com', 'hotmail.com'","title":"freeEmailDomain"},{"location":"formatters/internet/#safeemaildomain","text":"Generate a safe email domain. echo $faker->safeEmailDomain(); // 'example.net', 'example.org'","title":"safeEmailDomain"},{"location":"formatters/internet/#username","text":"Generate a username. echo $faker->userName(); // 'ipaucek', 'homenick.alexandre'","title":"userName"},{"location":"formatters/internet/#password","text":"Generate a password, with a given minimum and maximum length. By default, the values 6 and 20 are used for the minimum and maximum respectively. echo $faker->password(); // 'dE1U[G$n4g%-Eie[]rn[', '-YCc1t|NSh)U&j6Z' echo $faker->password(2, 6); // 'GK,M|', '/ZG.'","title":"password"},{"location":"formatters/internet/#domainname","text":"Generate a domain name. echo $faker->domainName(); // 'toy.com', 'schamberger.biz'","title":"domainName"},{"location":"formatters/internet/#domainword","text":"Generate a domain word. echo $faker->domainWord(); // 'feil', 'wintheiser'","title":"domainWord"},{"location":"formatters/internet/#tld","text":"Generate a tld (top-level domain). echo $faker->tld(); // 'com', 'org'","title":"tld"},{"location":"formatters/internet/#url","text":"Generate a URL. echo $faker->url(); // 'http://cormier.info/eligendi-rem-omnis-quia.html', 'http://pagac.com/'","title":"url"},{"location":"formatters/internet/#slug","text":"Generate a slug, with a given amount of words. By default, the amount of words it set to 6. Optionally, a second parameter can be supplied. When false , only slugs with the given amount of words will be generated. echo $faker->slug(); // 'facere-ipsam-sit-aut-ut-dolorem', 'qui-soluta-sed-facilis-est-ratione-dolor-autem' echo $faker->slug(2); // 'et-et-et', 'temporibus-iure' echo $faker->slug(3, false); // 'ipsa-consectetur-est', 'quia-ad-nihil'","title":"slug"},{"location":"formatters/internet/#ipv4","text":"Generate an IPv4 address. echo $faker->ipv4(); // '90.119.172.201', '84.172.232.19'","title":"ipv4"},{"location":"formatters/internet/#localipv4","text":"Generate an IPv4 address, inside a local subnet. echo $faker->localIpv4(); // '192.168.85.208', '192.168.217.138'","title":"localIpv4"},{"location":"formatters/internet/#ipv6","text":"Generate an IPv6 address. echo $faker->ipv6(); // 'c3f3:40ed:6d6c:4e8e:746b:887a:4551:42e5', '1c3d:a2cf:80ad:f2b6:7794:4f3f:f9fb:59cf'","title":"ipv6"},{"location":"formatters/internet/#macaddress","text":"Generate a random MAC address. echo $faker->macAddress(); // '94:00:10:01:58:07', '0E:E1:48:29:2F:E2'","title":"macAddress"},{"location":"formatters/miscellaneous/","text":"Miscellaneous # boolean # Generate a random bool . echo $faker->boolean(); // true, true, false md5 # Generate a random MD5 hash string . echo $faker->md5(); // 'b1f447c2ee6029c7d2d8b3112ecfb160', '6d5d81469dfb247a15c9030d5aae38f1' sha1 # Generate a random SHA-1 hash string . echo $faker->sha1(); // '20d1061c44ca4eef07e8d129c7000101b3e872af', '28cda1350140b3465ea8f65b933b1dad98ee5425' sha256 # Generate a random SHA-256 hash string . echo $faker->sha256(); // 'bfa80759a5c40a8dd6694a3752bac231ae49c136396427815b0e33bd10974919' locale # Generate a random locale string . echo $faker->locale(); // 'ln_CD', 'te_IN', 'sh_BA' countryCode # Generate a random two-letter country code string . echo $faker->countryCode(); // 'LK', 'UM', 'CZ' countryISOAlpha3 # Generate a random three-letter country code string . echo $faker->countryISOAlpha3(); // 'ZAF', 'UKR', 'MHL' languageCode # Generate a random two-letter language code string . echo $faker->languageCode(); // 'av', 'sc', 'as' currencyCode # Generate a random currency code string . echo $faker->currencyCode(); // 'AED', 'SAR', 'KZT' emoji # Generate a random emoji. K echo $faker->emoji(); // '\ud83d\ude26', '\ud83d\ude0e', '\ud83d\ude22'","title":"Miscellaneous"},{"location":"formatters/miscellaneous/#miscellaneous","text":"","title":"Miscellaneous"},{"location":"formatters/miscellaneous/#boolean","text":"Generate a random bool . echo $faker->boolean(); // true, true, false","title":"boolean"},{"location":"formatters/miscellaneous/#md5","text":"Generate a random MD5 hash string . echo $faker->md5(); // 'b1f447c2ee6029c7d2d8b3112ecfb160', '6d5d81469dfb247a15c9030d5aae38f1'","title":"md5"},{"location":"formatters/miscellaneous/#sha1","text":"Generate a random SHA-1 hash string . echo $faker->sha1(); // '20d1061c44ca4eef07e8d129c7000101b3e872af', '28cda1350140b3465ea8f65b933b1dad98ee5425'","title":"sha1"},{"location":"formatters/miscellaneous/#sha256","text":"Generate a random SHA-256 hash string . echo $faker->sha256(); // 'bfa80759a5c40a8dd6694a3752bac231ae49c136396427815b0e33bd10974919'","title":"sha256"},{"location":"formatters/miscellaneous/#locale","text":"Generate a random locale string . echo $faker->locale(); // 'ln_CD', 'te_IN', 'sh_BA'","title":"locale"},{"location":"formatters/miscellaneous/#countrycode","text":"Generate a random two-letter country code string . echo $faker->countryCode(); // 'LK', 'UM', 'CZ'","title":"countryCode"},{"location":"formatters/miscellaneous/#countryisoalpha3","text":"Generate a random three-letter country code string . echo $faker->countryISOAlpha3(); // 'ZAF', 'UKR', 'MHL'","title":"countryISOAlpha3"},{"location":"formatters/miscellaneous/#languagecode","text":"Generate a random two-letter language code string . echo $faker->languageCode(); // 'av', 'sc', 'as'","title":"languageCode"},{"location":"formatters/miscellaneous/#currencycode","text":"Generate a random currency code string . echo $faker->currencyCode(); // 'AED', 'SAR', 'KZT'","title":"currencyCode"},{"location":"formatters/miscellaneous/#emoji","text":"Generate a random emoji. K echo $faker->emoji(); // '\ud83d\ude26', '\ud83d\ude0e', '\ud83d\ude22'","title":"emoji"},{"location":"formatters/numbers-and-strings/","text":"Numbers and Strings # randomDigit # Generates a random integer from 0 until 9. echo $faker->randomDigit(); // an integer between 0 and 10 randomDigitNot # Generates a random integer from 0 until 9, excluding a given number. echo $faker->randomDigitNot(2); // 1, 3, 4, 5, 6, 7, 8 or 9 randomDigitNotNull # Generates a random integer from 1 until 9. echo $faker->randomDigitNotNull(); // an integer between 1 and 10 randomNumber # Generates a random integer, containing between 0 and $nbDigits amount of digits. When the $strict parameter is true , it will only return integers with $nbDigits amount of digits. echo $faker->randomNumber(5, false); // 123, 43, 19238, 5, or 1203 echo $faker->randomNumber(5, true); // 12643, 42931, or 32919 randomFloat # Generates a random float. Optionally it's possible to specify the amount of decimals. The second and third parameters optionally specify a lower and upper bound respectively. echo $faker->randomFloat(); // 12.9830, 2193.1232312, 102.12 echo $faker->randomFloat(2); // 43.23, 1203.49, 3428.93 echo $faker->randomFloat(1, 20, 30); // 21.7, 27.2, 28.1 numberBetween # Generates a random integer between $min and $max . By default, an integer is generated between 0 and 2,147,483,647 (32-bit integer). echo $faker->numberBetween(); // 120378987, 182, 102310983 echo $faker->numberBetween(0, 100); // 32, 87, 91, 13, 75 randomLetter # Generates a random character from the alphabet. echo $faker->randomLetter(); // 'h', 'i', 'q' randomElements # Returns $count amount of random element from the given array. By default, the $count parameter is set to 1. echo $faker->randomElements(['a', 'b', 'c', 'd', 'e']); // ['c'] echo $faker->randomElements(['a', 'b', 'c', 'd', 'e'], 3); // ['a', 'd', 'e'] randomElement # Returns $count amount of random element from the given array. By default, the $count parameter is set to 1. echo $faker->randomElement(['a', 'b', 'c', 'd', 'e']); // 'c' shuffle # Returns a shuffled version of either an array or string. echo $faker->shuffle('hello-world'); // 'lrhoodl-ewl' echo $faker->shuffle([1, 2, 3]); // [3, 1, 2] numerify # Generate a string where all # characters are replaced by digits between 0 and 10. By default, ### is used as input. echo $faker->numerify(); // '912', '271', '109', '674' echo $faker->numerify('user-####'); // 'user-4928', 'user-3427', 'user-1280' lexify # Generate a string where all ? characters are replaces with a random letter from the Latin alphabet. By default, ???? is used as input. echo $faker->lexify(); // 'sakh', 'qwei', 'adsj' echo $faker->lexify('id-????'); // 'id-xoqe', 'id-pqpq', 'id-zpeu' bothify # Generate a string where ? characters are replaced with a random letter, and # characters are replaces with a random digit between 0 and 10. By default, ## ?? is used as input. echo $faker->bothify(); // '46 hd', '19 ls', '75 pw' echo $faker->bothify('?????-#####'); // 'lsadj-10298', 'poiem-98342', 'lcnsz-42938' asciify # Generate a string where * characters are replaced with a random character from the ASCII table. By default, **** is used as input. echo $faker->asciify(); // '%Y+!', '{<\"B', 'kF^a' echo $faker->asciify('user-****'); // 'user-ntwx', 'user-PK`A', 'user-n`,X' regexify # Generate a random string based on a regex. By default, an empty string is used as input. echo $faker->regexify(); // '' echo $faker->regexify('[A-Z]{5}[0-4]{3}'); // 'DRSQX201', 'FUDPA404', 'CQVIU411'","title":"Numbers and Strings"},{"location":"formatters/numbers-and-strings/#numbers-and-strings","text":"","title":"Numbers and Strings"},{"location":"formatters/numbers-and-strings/#randomdigit","text":"Generates a random integer from 0 until 9. echo $faker->randomDigit(); // an integer between 0 and 10","title":"randomDigit"},{"location":"formatters/numbers-and-strings/#randomdigitnot","text":"Generates a random integer from 0 until 9, excluding a given number. echo $faker->randomDigitNot(2); // 1, 3, 4, 5, 6, 7, 8 or 9","title":"randomDigitNot"},{"location":"formatters/numbers-and-strings/#randomdigitnotnull","text":"Generates a random integer from 1 until 9. echo $faker->randomDigitNotNull(); // an integer between 1 and 10","title":"randomDigitNotNull"},{"location":"formatters/numbers-and-strings/#randomnumber","text":"Generates a random integer, containing between 0 and $nbDigits amount of digits. When the $strict parameter is true , it will only return integers with $nbDigits amount of digits. echo $faker->randomNumber(5, false); // 123, 43, 19238, 5, or 1203 echo $faker->randomNumber(5, true); // 12643, 42931, or 32919","title":"randomNumber"},{"location":"formatters/numbers-and-strings/#randomfloat","text":"Generates a random float. Optionally it's possible to specify the amount of decimals. The second and third parameters optionally specify a lower and upper bound respectively. echo $faker->randomFloat(); // 12.9830, 2193.1232312, 102.12 echo $faker->randomFloat(2); // 43.23, 1203.49, 3428.93 echo $faker->randomFloat(1, 20, 30); // 21.7, 27.2, 28.1","title":"randomFloat"},{"location":"formatters/numbers-and-strings/#numberbetween","text":"Generates a random integer between $min and $max . By default, an integer is generated between 0 and 2,147,483,647 (32-bit integer). echo $faker->numberBetween(); // 120378987, 182, 102310983 echo $faker->numberBetween(0, 100); // 32, 87, 91, 13, 75","title":"numberBetween"},{"location":"formatters/numbers-and-strings/#randomletter","text":"Generates a random character from the alphabet. echo $faker->randomLetter(); // 'h', 'i', 'q'","title":"randomLetter"},{"location":"formatters/numbers-and-strings/#randomelements","text":"Returns $count amount of random element from the given array. By default, the $count parameter is set to 1. echo $faker->randomElements(['a', 'b', 'c', 'd', 'e']); // ['c'] echo $faker->randomElements(['a', 'b', 'c', 'd', 'e'], 3); // ['a', 'd', 'e']","title":"randomElements"},{"location":"formatters/numbers-and-strings/#randomelement","text":"Returns $count amount of random element from the given array. By default, the $count parameter is set to 1. echo $faker->randomElement(['a', 'b', 'c', 'd', 'e']); // 'c'","title":"randomElement"},{"location":"formatters/numbers-and-strings/#shuffle","text":"Returns a shuffled version of either an array or string. echo $faker->shuffle('hello-world'); // 'lrhoodl-ewl' echo $faker->shuffle([1, 2, 3]); // [3, 1, 2]","title":"shuffle"},{"location":"formatters/numbers-and-strings/#numerify","text":"Generate a string where all # characters are replaced by digits between 0 and 10. By default, ### is used as input. echo $faker->numerify(); // '912', '271', '109', '674' echo $faker->numerify('user-####'); // 'user-4928', 'user-3427', 'user-1280'","title":"numerify"},{"location":"formatters/numbers-and-strings/#lexify","text":"Generate a string where all ? characters are replaces with a random letter from the Latin alphabet. By default, ???? is used as input. echo $faker->lexify(); // 'sakh', 'qwei', 'adsj' echo $faker->lexify('id-????'); // 'id-xoqe', 'id-pqpq', 'id-zpeu'","title":"lexify"},{"location":"formatters/numbers-and-strings/#bothify","text":"Generate a string where ? characters are replaced with a random letter, and # characters are replaces with a random digit between 0 and 10. By default, ## ?? is used as input. echo $faker->bothify(); // '46 hd', '19 ls', '75 pw' echo $faker->bothify('?????-#####'); // 'lsadj-10298', 'poiem-98342', 'lcnsz-42938'","title":"bothify"},{"location":"formatters/numbers-and-strings/#asciify","text":"Generate a string where * characters are replaced with a random character from the ASCII table. By default, **** is used as input. echo $faker->asciify(); // '%Y+!', '{<\"B', 'kF^a' echo $faker->asciify('user-****'); // 'user-ntwx', 'user-PK`A', 'user-n`,X'","title":"asciify"},{"location":"formatters/numbers-and-strings/#regexify","text":"Generate a random string based on a regex. By default, an empty string is used as input. echo $faker->regexify(); // '' echo $faker->regexify('[A-Z]{5}[0-4]{3}'); // 'DRSQX201', 'FUDPA404', 'CQVIU411'","title":"regexify"},{"location":"formatters/payment/","text":"Payment # creditCardType # Generate a credit card type. echo $faker->creditCardType(); // 'MasterCard', 'Visa' creditCardNumber # Generate a credit card number with a given type. By default, a random type is used. Supported types are 'Visa', ' MasterCard', 'American Express', and 'Discover'. Optionally, a second and third parameter may be supplied. These define if the credit card number should be formatted, and which separator to use. echo $faker->creditCardNumber(); // '4556817762319090', '5151791946409422' echo $faker->creditCardNumber('Visa'); // '4539710900519030', '4929494068680706' echo $faker->creditCardNumber('Visa', true); // '4624-6303-5483-5433', '4916-3711-2654-8734' echo $faker->creditCardNumber('Visa', true, '::'); // '4539::6626::9844::3867', '4916::6161::0683::7022' creditCardExpirationDate # Generate a credit card expiration date ( DateTime ). By default, only valid dates are generated. Potentially invalid dates can be generated by using false as input. echo $faker->creditCardExpirationDate(); // DateTime: between now and +36 months echo $faker->creditCardExpirationDate(false); // DateTime: between -36 months and +36 months creditCardExpirationDateString # Generate a credit card expiration date ( string ). By default, only valid dates are generated. Potentially invalid dates can be generated by using false as input. The string is formatted using m/y . Optionally, a second parameter can be passed to override this format. echo $faker->creditCardExpirationDateString(); // '09/23', '06/21' echo $faker->creditCardExpirationDateString(false); // '01/18', '09/21' echo $faker->creditCardExpirationDateString(true, 'm-Y'); // '12-2020', '07-2023' creditCardDetails # Generate an array with credit card details. By default, only valid expiration dates will be generated. Potentially invalid expiration dates can be generated by using false as input. echo $faker->creditCardDetails(); // ['type' => 'Visa', 'number' => '4961616159985979', 'name' => 'Mr. Charley Greenfelder II', 'expirationDate' => '01/23'] echo $faker->creditCardDetails(false); // ['type' => 'MasterCard', 'number' => '2720381993865020', 'name' => 'Dr. Ivy Gerhold Jr.', 'expirationDate' => '10/18'] iban # Generate an IBAN string with a given country and bank code. By default, a random country and bank code will be used. The country code format should be ISO 3166-1 alpha-2 . echo $faker->iban(); // 'LI2690204NV3C0BINN164', 'NL56ETEE3836179630' echo $faker->iban('NL'); // 'NL95ZOGL3572193597', 'NL76LTTM8016514526' echo $faker->iban('NL', 'INGB'); // 'NL11INGB2348102199', 'NL87INGB6409935479' swiftBicNumber # Generate a random SWIFT/BIC number string . echo $faker->swiftBicNumber(); // 'OGFCTX2GRGN', 'QFKVLJB7'","title":"Payment"},{"location":"formatters/payment/#payment","text":"","title":"Payment"},{"location":"formatters/payment/#creditcardtype","text":"Generate a credit card type. echo $faker->creditCardType(); // 'MasterCard', 'Visa'","title":"creditCardType"},{"location":"formatters/payment/#creditcardnumber","text":"Generate a credit card number with a given type. By default, a random type is used. Supported types are 'Visa', ' MasterCard', 'American Express', and 'Discover'. Optionally, a second and third parameter may be supplied. These define if the credit card number should be formatted, and which separator to use. echo $faker->creditCardNumber(); // '4556817762319090', '5151791946409422' echo $faker->creditCardNumber('Visa'); // '4539710900519030', '4929494068680706' echo $faker->creditCardNumber('Visa', true); // '4624-6303-5483-5433', '4916-3711-2654-8734' echo $faker->creditCardNumber('Visa', true, '::'); // '4539::6626::9844::3867', '4916::6161::0683::7022'","title":"creditCardNumber"},{"location":"formatters/payment/#creditcardexpirationdate","text":"Generate a credit card expiration date ( DateTime ). By default, only valid dates are generated. Potentially invalid dates can be generated by using false as input. echo $faker->creditCardExpirationDate(); // DateTime: between now and +36 months echo $faker->creditCardExpirationDate(false); // DateTime: between -36 months and +36 months","title":"creditCardExpirationDate"},{"location":"formatters/payment/#creditcardexpirationdatestring","text":"Generate a credit card expiration date ( string ). By default, only valid dates are generated. Potentially invalid dates can be generated by using false as input. The string is formatted using m/y . Optionally, a second parameter can be passed to override this format. echo $faker->creditCardExpirationDateString(); // '09/23', '06/21' echo $faker->creditCardExpirationDateString(false); // '01/18', '09/21' echo $faker->creditCardExpirationDateString(true, 'm-Y'); // '12-2020', '07-2023'","title":"creditCardExpirationDateString"},{"location":"formatters/payment/#creditcarddetails","text":"Generate an array with credit card details. By default, only valid expiration dates will be generated. Potentially invalid expiration dates can be generated by using false as input. echo $faker->creditCardDetails(); // ['type' => 'Visa', 'number' => '4961616159985979', 'name' => 'Mr. Charley Greenfelder II', 'expirationDate' => '01/23'] echo $faker->creditCardDetails(false); // ['type' => 'MasterCard', 'number' => '2720381993865020', 'name' => 'Dr. Ivy Gerhold Jr.', 'expirationDate' => '10/18']","title":"creditCardDetails"},{"location":"formatters/payment/#iban","text":"Generate an IBAN string with a given country and bank code. By default, a random country and bank code will be used. The country code format should be ISO 3166-1 alpha-2 . echo $faker->iban(); // 'LI2690204NV3C0BINN164', 'NL56ETEE3836179630' echo $faker->iban('NL'); // 'NL95ZOGL3572193597', 'NL76LTTM8016514526' echo $faker->iban('NL', 'INGB'); // 'NL11INGB2348102199', 'NL87INGB6409935479'","title":"iban"},{"location":"formatters/payment/#swiftbicnumber","text":"Generate a random SWIFT/BIC number string . echo $faker->swiftBicNumber(); // 'OGFCTX2GRGN', 'QFKVLJB7'","title":"swiftBicNumber"},{"location":"formatters/text-and-paragraphs/","text":"Text and Paragraphs # word # Generate a string containing random single word. echo $faker->word(); // 'molestiae', 'occaecati', 'distinctio' words # Generate an array containing a specified amount of random words. Optionally, a second boolean parameter can be supplied. When true , a string will be returned instead of an array. echo $faker->words(); // ['praesentium', 'possimus', 'modi'] echo $faker->words(5); // ['molestias', 'repellendus', 'qui', 'temporibus', 'ut'] echo $faker->words(3, true); // 'placeat vero saepe' sentence # Generate a sentence containing a given amount of words. By default, 6 words is used. Optionally, a second boolean parameter can be supplied. When false , only sentences with the given amount of words will be generated. By default, sentence will deviate from the given amount by +/- 40%. echo $faker->sentence(); // 'Sit vitae voluptas sint non voluptates.' echo $faker->sentence(3); // 'Laboriosam non voluptas.' sentences # Generate an array containing a given amount of sentences. By default, 3 sentences are generated. Optionally, a second boolean parameter can be supplied. When true , a string will be returned instead of an array. echo $faker->sentences(); // ['Optio quos qui illo error.', 'Laborum vero a officia id corporis.', 'Saepe provident esse hic eligendi.'] echo $faker->sentences(2); // ['Consequatur animi cumque.', 'Quibusdam eveniet ut.'] paragraph # Generate a paragraph of text, containing a given amount of sentences. By default, 3 sentences are generated. Optionally, a second boolean parameter can be supplied. When false , only sentences with the given amount of words will be generated. By default, sentences will deviate from the default word length of 6 by +/- 40%. echo $faker->paragraph(); // 'Similique molestias exercitationem officia aut. Itaque doloribus et rerum voluptate iure. Unde veniam magni dignissimos expedita eius.' echo $faker->paragraph(2); // 'Consequatur velit incidunt ipsam eius beatae. Est omnis autem illum iure.' echo $faker->paragraph(2, false); // 'Laborum unde mollitia distinctio nam nihil. Quo expedita et exercitationem voluptas impedit.' paragraphs # Generate an array containing a given amount of paragraphs. By default, 3 paragraphs are generated. Optionally, a second boolean parameter can be supplied. When true , a string will be returned instead of an array. echo $faker->paragraphs(); // [ // 'Aperiam fugiat alias nobis sunt hic. Quasi dolore autem quo sapiente et distinctio. Dolor ipsum saepe quaerat possimus molestiae placeat iste.', // 'Et enim labore debitis consequatur id omnis. Dolorum qui id natus tenetur doloremque sed. Delectus et quis sit quod. Animi assumenda dolorum voluptate nobis aut.', // 'Voluptas quidem corporis non sed veritatis laudantium eaque modi. Quidem est et est deserunt. Voluptatem magni assumenda voluptas et qui delectus.' // ] echo $faker->paragraphs(2); // [ // 'Quasi nihil nisi enim omnis natus eum. Autem sed ea a maxime. Qui eaque doloribus sit et ab repellat. Aspernatur est rem ut.', // 'Corrupti quibusdam qui et excepturi. Fugiat minima soluta quae sunt. Aperiam adipisci quas minus eius.' // ] echo $faker->paragraphs(2, true); // Quia odit et quia ab. Eos officia dolor aut quia et sed. Quis sint amet aut. Eius enim sint praesentium error quo sed eligendi. Quo id sint et amet dolorem rem maiores. // // Fuga atque velit consectetur id fugit eum. Cupiditate aut itaque dolores praesentium. Eius sunt ut ut ipsam. text # Generate a random string of text, with the given amount of words. By default, 200 is used as input. echo $faker->text(); // Omnis accusantium non ut dolor modi. Quo vel omnis eum velit aspernatur pariatur. Blanditiis nisi accusantium a deleniti. Nam aut dolorum aut officiis consequatur. echo $faker->text(100); // Quaerat eveniet magni a optio. Officia facilis cupiditate fugiat earum ipsam nemo nulla.","title":"Text and Paragraphs"},{"location":"formatters/text-and-paragraphs/#text-and-paragraphs","text":"","title":"Text and Paragraphs"},{"location":"formatters/text-and-paragraphs/#word","text":"Generate a string containing random single word. echo $faker->word(); // 'molestiae', 'occaecati', 'distinctio'","title":"word"},{"location":"formatters/text-and-paragraphs/#words","text":"Generate an array containing a specified amount of random words. Optionally, a second boolean parameter can be supplied. When true , a string will be returned instead of an array. echo $faker->words(); // ['praesentium', 'possimus', 'modi'] echo $faker->words(5); // ['molestias', 'repellendus', 'qui', 'temporibus', 'ut'] echo $faker->words(3, true); // 'placeat vero saepe'","title":"words"},{"location":"formatters/text-and-paragraphs/#sentence","text":"Generate a sentence containing a given amount of words. By default, 6 words is used. Optionally, a second boolean parameter can be supplied. When false , only sentences with the given amount of words will be generated. By default, sentence will deviate from the given amount by +/- 40%. echo $faker->sentence(); // 'Sit vitae voluptas sint non voluptates.' echo $faker->sentence(3); // 'Laboriosam non voluptas.'","title":"sentence"},{"location":"formatters/text-and-paragraphs/#sentences","text":"Generate an array containing a given amount of sentences. By default, 3 sentences are generated. Optionally, a second boolean parameter can be supplied. When true , a string will be returned instead of an array. echo $faker->sentences(); // ['Optio quos qui illo error.', 'Laborum vero a officia id corporis.', 'Saepe provident esse hic eligendi.'] echo $faker->sentences(2); // ['Consequatur animi cumque.', 'Quibusdam eveniet ut.']","title":"sentences"},{"location":"formatters/text-and-paragraphs/#paragraph","text":"Generate a paragraph of text, containing a given amount of sentences. By default, 3 sentences are generated. Optionally, a second boolean parameter can be supplied. When false , only sentences with the given amount of words will be generated. By default, sentences will deviate from the default word length of 6 by +/- 40%. echo $faker->paragraph(); // 'Similique molestias exercitationem officia aut. Itaque doloribus et rerum voluptate iure. Unde veniam magni dignissimos expedita eius.' echo $faker->paragraph(2); // 'Consequatur velit incidunt ipsam eius beatae. Est omnis autem illum iure.' echo $faker->paragraph(2, false); // 'Laborum unde mollitia distinctio nam nihil. Quo expedita et exercitationem voluptas impedit.'","title":"paragraph"},{"location":"formatters/text-and-paragraphs/#paragraphs","text":"Generate an array containing a given amount of paragraphs. By default, 3 paragraphs are generated. Optionally, a second boolean parameter can be supplied. When true , a string will be returned instead of an array. echo $faker->paragraphs(); // [ // 'Aperiam fugiat alias nobis sunt hic. Quasi dolore autem quo sapiente et distinctio. Dolor ipsum saepe quaerat possimus molestiae placeat iste.', // 'Et enim labore debitis consequatur id omnis. Dolorum qui id natus tenetur doloremque sed. Delectus et quis sit quod. Animi assumenda dolorum voluptate nobis aut.', // 'Voluptas quidem corporis non sed veritatis laudantium eaque modi. Quidem est et est deserunt. Voluptatem magni assumenda voluptas et qui delectus.' // ] echo $faker->paragraphs(2); // [ // 'Quasi nihil nisi enim omnis natus eum. Autem sed ea a maxime. Qui eaque doloribus sit et ab repellat. Aspernatur est rem ut.', // 'Corrupti quibusdam qui et excepturi. Fugiat minima soluta quae sunt. Aperiam adipisci quas minus eius.' // ] echo $faker->paragraphs(2, true); // Quia odit et quia ab. Eos officia dolor aut quia et sed. Quis sint amet aut. Eius enim sint praesentium error quo sed eligendi. Quo id sint et amet dolorem rem maiores. // // Fuga atque velit consectetur id fugit eum. Cupiditate aut itaque dolores praesentium. Eius sunt ut ut ipsam.","title":"paragraphs"},{"location":"formatters/text-and-paragraphs/#text","text":"Generate a random string of text, with the given amount of words. By default, 200 is used as input. echo $faker->text(); // Omnis accusantium non ut dolor modi. Quo vel omnis eum velit aspernatur pariatur. Blanditiis nisi accusantium a deleniti. Nam aut dolorum aut officiis consequatur. echo $faker->text(100); // Quaerat eveniet magni a optio. Officia facilis cupiditate fugiat earum ipsam nemo nulla.","title":"text"},{"location":"formatters/user-agent/","text":"User Agent # userAgent # Generate a user agent. echo $faker->userAgent(); // 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/5350 (KHTML, like Gecko) Chrome/37.0.806.0 Mobile Safari/5350' chrome # Generate a user agent that belongs to Google Chrome. echo $faker->chrome(); // 'Mozilla/5.0 (Macintosh; PPC Mac OS X 10_8_1) AppleWebKit/5352 (KHTML, like Gecko) Chrome/40.0.848.0 Mobile Safari/5352' firefox # Generate a user agent that belongs to Mozilla Firefox. echo $faker->firefox(); // 'Mozilla/5.0 (X11; Linux i686; rv:7.0) Gecko/20121220 Firefox/35.0' safari # Generate a user agent that belongs to Apple Safari. echo $faker->safari(); // 'Mozilla/5.0 (Macintosh; PPC Mac OS X 10_8_3 rv:5.0; sl-SI) AppleWebKit/532.33.2 (KHTML, like Gecko) Version/5.0 Safari/532.33.2' opera # Generate a user agent that belongs to Opera. echo $faker->opera(); // 'Opera/8.55 (Windows 95; en-US) Presto/2.9.286 Version/11.00' internetExplorer # Generate a user agent that belongs to Internet Explorer. echo $faker->internetExplorer(); // 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 5.0; Trident/5.1)'","title":"User Agent"},{"location":"formatters/user-agent/#user-agent","text":"","title":"User Agent"},{"location":"formatters/user-agent/#useragent","text":"Generate a user agent. echo $faker->userAgent(); // 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/5350 (KHTML, like Gecko) Chrome/37.0.806.0 Mobile Safari/5350'","title":"userAgent"},{"location":"formatters/user-agent/#chrome","text":"Generate a user agent that belongs to Google Chrome. echo $faker->chrome(); // 'Mozilla/5.0 (Macintosh; PPC Mac OS X 10_8_1) AppleWebKit/5352 (KHTML, like Gecko) Chrome/40.0.848.0 Mobile Safari/5352'","title":"chrome"},{"location":"formatters/user-agent/#firefox","text":"Generate a user agent that belongs to Mozilla Firefox. echo $faker->firefox(); // 'Mozilla/5.0 (X11; Linux i686; rv:7.0) Gecko/20121220 Firefox/35.0'","title":"firefox"},{"location":"formatters/user-agent/#safari","text":"Generate a user agent that belongs to Apple Safari. echo $faker->safari(); // 'Mozilla/5.0 (Macintosh; PPC Mac OS X 10_8_3 rv:5.0; sl-SI) AppleWebKit/532.33.2 (KHTML, like Gecko) Version/5.0 Safari/532.33.2'","title":"safari"},{"location":"formatters/user-agent/#opera","text":"Generate a user agent that belongs to Opera. echo $faker->opera(); // 'Opera/8.55 (Windows 95; en-US) Presto/2.9.286 Version/11.00'","title":"opera"},{"location":"formatters/user-agent/#internetexplorer","text":"Generate a user agent that belongs to Internet Explorer. echo $faker->internetExplorer(); // 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 5.0; Trident/5.1)'","title":"internetExplorer"},{"location":"formatters/uuid/","text":"UUID # uuid # Generate a random UUID. echo $faker->uuid(); // 'bf91c434-dcf3-3a4c-b49a-12e0944ef1e2', '5b2c0654-de5e-3153-ac1f-751cac718e4e'","title":"UUID"},{"location":"formatters/uuid/#uuid","text":"","title":"UUID"},{"location":"formatters/uuid/#uuid_1","text":"Generate a random UUID. echo $faker->uuid(); // 'bf91c434-dcf3-3a4c-b49a-12e0944ef1e2', '5b2c0654-de5e-3153-ac1f-751cac718e4e'","title":"uuid"},{"location":"formatters/version/","text":"Version # semver # Generate a random semantic version v2.0.0 string. Optionally, the parameters $preRelease and $build can be set to true to randomly include pre-release and/or build parts into the version. Examples: echo $faker->semver(); // 0.0.1, 1.0.0, 9.99.99 echo $faker->semver(true, true); // 0.0.1-beta, 1.0.0-rc.1, 1.5.9+276e88b, 5.6.2-alpha.2+20180419085616","title":"Version"},{"location":"formatters/version/#version","text":"","title":"Version"},{"location":"formatters/version/#semver","text":"Generate a random semantic version v2.0.0 string. Optionally, the parameters $preRelease and $build can be set to true to randomly include pre-release and/or build parts into the version. Examples: echo $faker->semver(); // 0.0.1, 1.0.0, 9.99.99 echo $faker->semver(true, true); // 0.0.1-beta, 1.0.0-rc.1, 1.5.9+276e88b, 5.6.2-alpha.2+20180419085616","title":"semver"},{"location":"locales/ar_SA/","text":"Arabic (Saudi Arabia) # Faker\\Provider\\ar_SA\\Address # echo $faker->governorate(); // \"\u0645\u0646\u0637\u0642\u0629 \u0627\u0644\u062c\u0648\u0641\" echo $faker->subdivision(); // \"\u0645\u0646\u0637\u0642\u0629 \u0627\u0644\u0631\u064a\u0627\u0636\" Faker\\Provider\\ar_SA\\Company # echo $faker->companyIdNumber(); // \"7008914645\" Faker\\Provider\\ar_SA\\Payment # echo $faker->bankAccountNumber(); // \"SA0218IBYZVZJSEC8536V4XC\" Faker\\Provider\\ar_SA\\Person # echo $faker->idNumber(); // ID number echo $faker->nationalIdNumber(); // Citizen ID number echo $faker->foreignerIdNumber(); // Foreigner ID number","title":"Arabic (Saudi Arabia)"},{"location":"locales/ar_SA/#arabic-saudi-arabia","text":"","title":"Arabic (Saudi Arabia)"},{"location":"locales/ar_SA/#fakerproviderar_saaddress","text":"echo $faker->governorate(); // \"\u0645\u0646\u0637\u0642\u0629 \u0627\u0644\u062c\u0648\u0641\" echo $faker->subdivision(); // \"\u0645\u0646\u0637\u0642\u0629 \u0627\u0644\u0631\u064a\u0627\u0636\"","title":"Faker\\Provider\\ar_SA\\Address"},{"location":"locales/ar_SA/#fakerproviderar_sacompany","text":"echo $faker->companyIdNumber(); // \"7008914645\"","title":"Faker\\Provider\\ar_SA\\Company"},{"location":"locales/ar_SA/#fakerproviderar_sapayment","text":"echo $faker->bankAccountNumber(); // \"SA0218IBYZVZJSEC8536V4XC\"","title":"Faker\\Provider\\ar_SA\\Payment"},{"location":"locales/ar_SA/#fakerproviderar_saperson","text":"echo $faker->idNumber(); // ID number echo $faker->nationalIdNumber(); // Citizen ID number echo $faker->foreignerIdNumber(); // Foreigner ID number","title":"Faker\\Provider\\ar_SA\\Person"},{"location":"locales/bg_BG/","text":"Bulgarian (Bulgaria) # Faker\\Provider\\bg_BG\\Payment # echo $faker->bankAccountNumber(); // \"BG89ZHIA63939899TD7TC8\" echo $faker->vat(); // \"BG 0123456789\" - Bulgarian Value Added Tax number echo $faker->vat(false)(); // \"BG0123456789\" - unspaced Bulgarian Value Added Tax number","title":"Bulgarian (Bulgaria)"},{"location":"locales/bg_BG/#bulgarian-bulgaria","text":"","title":"Bulgarian (Bulgaria)"},{"location":"locales/bg_BG/#fakerproviderbg_bgpayment","text":"echo $faker->bankAccountNumber(); // \"BG89ZHIA63939899TD7TC8\" echo $faker->vat(); // \"BG 0123456789\" - Bulgarian Value Added Tax number echo $faker->vat(false)(); // \"BG0123456789\" - unspaced Bulgarian Value Added Tax number","title":"Faker\\Provider\\bg_BG\\Payment"},{"location":"locales/bn_BD/","text":"Bangla (Bangladesh) # Faker\\Provider\\bn_BD\\Company # echo $faker->companyType(); // \"\u09b8\u09be\u09b0\"","title":"Bangla (Bangladesh)"},{"location":"locales/bn_BD/#bangla-bangladesh","text":"","title":"Bangla (Bangladesh)"},{"location":"locales/bn_BD/#fakerproviderbn_bdcompany","text":"echo $faker->companyType(); // \"\u09b8\u09be\u09b0\"","title":"Faker\\Provider\\bn_BD\\Company"},{"location":"locales/cs_CZ/","text":"Czech (Czech Republic) # Faker\\Provider\\cs_CZ\\Address # echo $faker->region(); // \"Libereck\u00fd kraj\" Faker\\Provider\\cs_CZ\\Company # // Generates a valid I\u010cO echo $faker->ico(); // \"69663963\" Faker\\Provider\\cs_CZ\\DateTime # echo $faker->monthNameGenitive(); // \"prosince\" echo $faker->formattedDate(); // \"12. listopadu 2015\" Faker\\Provider\\cs_CZ\\Payment # echo $faker->bankAccountNumber(); // \"CZ2318941673853266249134\" Faker\\Provider\\cs_CZ\\Person # echo $faker->birthNumber(); // \"7304243452\"","title":"Czech (Czech Republic)"},{"location":"locales/cs_CZ/#czech-czech-republic","text":"","title":"Czech (Czech Republic)"},{"location":"locales/cs_CZ/#fakerprovidercs_czaddress","text":"echo $faker->region(); // \"Libereck\u00fd kraj\"","title":"Faker\\Provider\\cs_CZ\\Address"},{"location":"locales/cs_CZ/#fakerprovidercs_czcompany","text":"// Generates a valid I\u010cO echo $faker->ico(); // \"69663963\"","title":"Faker\\Provider\\cs_CZ\\Company"},{"location":"locales/cs_CZ/#fakerprovidercs_czdatetime","text":"echo $faker->monthNameGenitive(); // \"prosince\" echo $faker->formattedDate(); // \"12. listopadu 2015\"","title":"Faker\\Provider\\cs_CZ\\DateTime"},{"location":"locales/cs_CZ/#fakerprovidercs_czpayment","text":"echo $faker->bankAccountNumber(); // \"CZ2318941673853266249134\"","title":"Faker\\Provider\\cs_CZ\\Payment"},{"location":"locales/cs_CZ/#fakerprovidercs_czperson","text":"echo $faker->birthNumber(); // \"7304243452\"","title":"Faker\\Provider\\cs_CZ\\Person"},{"location":"locales/da_DK/","text":"Danish (Denmark) # Faker\\Provider\\da_DK\\Person # // Generates a random CPR number echo $faker->cpr(); // \"051280-2387\" Faker\\Provider\\da_DK\\Address # // Generates a random 'kommune' name echo $faker->kommune(); // \"Frederiksberg\" // Generates a random region name echo $faker->region(); // \"Region Sj\u00e6lland\" Faker\\Provider\\da_DK\\Company # // Generates a random CVR number echo $faker->cvr(); // \"32458723\" // Generates a random P number echo $faker->p; // \"5398237590\" Faker\\Provider\\da_DK\\Payment # echo $faker->bankAccountNumber(); // \"DK4482839445577922\"","title":"Danish (Denmark)"},{"location":"locales/da_DK/#danish-denmark","text":"","title":"Danish (Denmark)"},{"location":"locales/da_DK/#fakerproviderda_dkperson","text":"// Generates a random CPR number echo $faker->cpr(); // \"051280-2387\"","title":"Faker\\Provider\\da_DK\\Person"},{"location":"locales/da_DK/#fakerproviderda_dkaddress","text":"// Generates a random 'kommune' name echo $faker->kommune(); // \"Frederiksberg\" // Generates a random region name echo $faker->region(); // \"Region Sj\u00e6lland\"","title":"Faker\\Provider\\da_DK\\Address"},{"location":"locales/da_DK/#fakerproviderda_dkcompany","text":"// Generates a random CVR number echo $faker->cvr(); // \"32458723\" // Generates a random P number echo $faker->p; // \"5398237590\"","title":"Faker\\Provider\\da_DK\\Company"},{"location":"locales/da_DK/#fakerproviderda_dkpayment","text":"echo $faker->bankAccountNumber(); // \"DK4482839445577922\"","title":"Faker\\Provider\\da_DK\\Payment"},{"location":"locales/de_AT/","text":"German (Austria) # Faker\\Provider\\de_AT\\Address # echo $faker->state(); // \"Wien\" Faker\\Provider\\de_AT\\Payment # echo $faker->bankAccountNumber(); // \"SA0218IBYZVZJSEC8536V4XC\" echo $faker->vat(); // \"AT U12345678\" - Austrian Value Added Tax number echo $faker->vat(false); // \"ATU12345678\" - unspaced Austrian Value Added Tax number Faker\\Provider\\de_AT\\Person # echo $faker->ssn(); // \"3130231169\" - Austrian Social Security number echo $faker->ssn(new \\DateTime('2010-09-08')); // \"8235080910\" - Austrian Social Security number for a specific birth date","title":"German (Austria)"},{"location":"locales/de_AT/#german-austria","text":"","title":"German (Austria)"},{"location":"locales/de_AT/#fakerproviderde_ataddress","text":"echo $faker->state(); // \"Wien\"","title":"Faker\\Provider\\de_AT\\Address"},{"location":"locales/de_AT/#fakerproviderde_atpayment","text":"echo $faker->bankAccountNumber(); // \"SA0218IBYZVZJSEC8536V4XC\" echo $faker->vat(); // \"AT U12345678\" - Austrian Value Added Tax number echo $faker->vat(false); // \"ATU12345678\" - unspaced Austrian Value Added Tax number","title":"Faker\\Provider\\de_AT\\Payment"},{"location":"locales/de_AT/#fakerproviderde_atperson","text":"echo $faker->ssn(); // \"3130231169\" - Austrian Social Security number echo $faker->ssn(new \\DateTime('2010-09-08')); // \"8235080910\" - Austrian Social Security number for a specific birth date","title":"Faker\\Provider\\de_AT\\Person"},{"location":"locales/de_CH/","text":"German (Switzerland) # Faker\\Provider\\de_CH\\Address # echo $faker->canton(); // [\"GE\" => \"Genf\"] echo $faker->cantonShort(); // \"GE\" echo $faker->cantonName(); // \"Genf\" Faker\\Provider\\de_CH\\Payment # echo $faker->bankAccountNumber(); // \"CH28167004ZG2ZU4X0H47\" Faker\\Provider\\de_CH\\Person # // Generates a random AVS13/AHV13 social security number echo $faker->avs13(); // \"756.1234.5678.97\" OR echo $faker->ahv13(); // \"756.1234.5678.97\" Faker\\Provider\\de_CH\\PhoneNumber # echo $faker->mobileNumber(); // \"076 915 37 73\"","title":"German (Switzerland)"},{"location":"locales/de_CH/#german-switzerland","text":"","title":"German (Switzerland)"},{"location":"locales/de_CH/#fakerproviderde_chaddress","text":"echo $faker->canton(); // [\"GE\" => \"Genf\"] echo $faker->cantonShort(); // \"GE\" echo $faker->cantonName(); // \"Genf\"","title":"Faker\\Provider\\de_CH\\Address"},{"location":"locales/de_CH/#fakerproviderde_chpayment","text":"echo $faker->bankAccountNumber(); // \"CH28167004ZG2ZU4X0H47\"","title":"Faker\\Provider\\de_CH\\Payment"},{"location":"locales/de_CH/#fakerproviderde_chperson","text":"// Generates a random AVS13/AHV13 social security number echo $faker->avs13(); // \"756.1234.5678.97\" OR echo $faker->ahv13(); // \"756.1234.5678.97\"","title":"Faker\\Provider\\de_CH\\Person"},{"location":"locales/de_CH/#fakerproviderde_chphonenumber","text":"echo $faker->mobileNumber(); // \"076 915 37 73\"","title":"Faker\\Provider\\de_CH\\PhoneNumber"},{"location":"locales/de_DE/","text":"German (Germany) # Faker\\Provider\\de_DE\\Payment # echo $faker->bankAccountNumber(); // \"DE41849025553661169313\" echo $faker->bank(); // \"Volksbank Stuttgart\"","title":"German (Germany)"},{"location":"locales/de_DE/#german-germany","text":"","title":"German (Germany)"},{"location":"locales/de_DE/#fakerproviderde_depayment","text":"echo $faker->bankAccountNumber(); // \"DE41849025553661169313\" echo $faker->bank(); // \"Volksbank Stuttgart\"","title":"Faker\\Provider\\de_DE\\Payment"},{"location":"locales/el_CY/","text":"Greek (Cyprus) # Faker\\Provider\\el_CY\\Payment # echo $faker->bankAccountNumber(); // \"CY52603169440XP3ZL20NAZ084I1\" echo $faker->bank(); // \"Societe Gererale Cyprus\" Faker\\Provider\\el_CY\\PhoneNumber # echo $faker->mobileNumber(); // \"93585791\"","title":"Greek (Cyprus)"},{"location":"locales/el_CY/#greek-cyprus","text":"","title":"Greek (Cyprus)"},{"location":"locales/el_CY/#fakerproviderel_cypayment","text":"echo $faker->bankAccountNumber(); // \"CY52603169440XP3ZL20NAZ084I1\" echo $faker->bank(); // \"Societe Gererale Cyprus\"","title":"Faker\\Provider\\el_CY\\Payment"},{"location":"locales/el_CY/#fakerproviderel_cyphonenumber","text":"echo $faker->mobileNumber(); // \"93585791\"","title":"Faker\\Provider\\el_CY\\PhoneNumber"},{"location":"locales/el_GR/","text":"Greek (Greece) # Faker\\Provider\\el_GR\\Address # echo $faker->prefecture(); // \"\u0398\u03b5\u03c1\u03bc\u03b1\u03ca\u03ba\u03cc\u03c2\" Faker\\Provider\\el_GR\\Company # echo $faker->doy(); // \"\u0391\u03bc\u03bf\u03c1\u03b3\u03bf\u03cd\" echo $faker->object(); // \"\u0394\u03b7\u03bc\u03bf\u03c3\u03b9\u03bf\u03b3\u03c1\u03ac\u03c6\u03bf\u03c2\" Faker\\Provider\\el_GR\\Payment # echo $faker->bankAccountNumber(); // \"GR173660451Z7ZO3VW6FR8Z99JT\" Faker\\Provider\\el_GR\\Phone # echo $faker->mobileNumber(); // \"693 257 1638\" echo $faker->fixedLineNumber(); // \"+302158370760\" echo $faker->personalNumber(); // \"+30 70 8858 6950\" echo $faker->premiumRateNumber(); // \"901 787 7879\" echo $faker->sharedCostNumber(); // \"+308065277962\" echo $faker->tollFreeNumber(); // \"+30 800 908 3465\"","title":"Greek (Greece)"},{"location":"locales/el_GR/#greek-greece","text":"","title":"Greek (Greece)"},{"location":"locales/el_GR/#fakerproviderel_graddress","text":"echo $faker->prefecture(); // \"\u0398\u03b5\u03c1\u03bc\u03b1\u03ca\u03ba\u03cc\u03c2\"","title":"Faker\\Provider\\el_GR\\Address"},{"location":"locales/el_GR/#fakerproviderel_grcompany","text":"echo $faker->doy(); // \"\u0391\u03bc\u03bf\u03c1\u03b3\u03bf\u03cd\" echo $faker->object(); // \"\u0394\u03b7\u03bc\u03bf\u03c3\u03b9\u03bf\u03b3\u03c1\u03ac\u03c6\u03bf\u03c2\"","title":"Faker\\Provider\\el_GR\\Company"},{"location":"locales/el_GR/#fakerproviderel_grpayment","text":"echo $faker->bankAccountNumber(); // \"GR173660451Z7ZO3VW6FR8Z99JT\"","title":"Faker\\Provider\\el_GR\\Payment"},{"location":"locales/el_GR/#fakerproviderel_grphone","text":"echo $faker->mobileNumber(); // \"693 257 1638\" echo $faker->fixedLineNumber(); // \"+302158370760\" echo $faker->personalNumber(); // \"+30 70 8858 6950\" echo $faker->premiumRateNumber(); // \"901 787 7879\" echo $faker->sharedCostNumber(); // \"+308065277962\" echo $faker->tollFreeNumber(); // \"+30 800 908 3465\"","title":"Faker\\Provider\\el_GR\\Phone"},{"location":"locales/en_GB/","text":"English (United Kingdom) # Faker\\Provider\\en_GB\\Address # echo $faker->secondaryAddress(); // \"Flat 13\" echo $faker->county(); // 'Hampshire' Faker\\Provider\\en_GB\\Company # echo $faker->vat(); // \"GB123 4567 89\" echo $faker->vat( Company::VAT_TYPE_BRANCH ); // \"GB123 4567 89 012\" echo $faker->vat( Company::VAT_TYPE_GOVERNMENT ); // \"GBGD123\" echo $faker->vat( Company::VAT_TYPE_HEALTH_AUTHORITY ); // \"GBHA567\" Faker\\Provider\\en_GB\\Payment # echo $faker->bankAccountNumber(); // \"GB28MLRJ42074399970100\" // Generates a random National Insurance number. echo $faker->nino(); // \"TY179309C\" Faker\\Provider\\en_GB\\PhoneNumber # echo $faker->mobileNumber(); // \"07720324489\"","title":"English (United Kingdom)"},{"location":"locales/en_GB/#english-united-kingdom","text":"","title":"English (United Kingdom)"},{"location":"locales/en_GB/#fakerprovideren_gbaddress","text":"echo $faker->secondaryAddress(); // \"Flat 13\" echo $faker->county(); // 'Hampshire'","title":"Faker\\Provider\\en_GB\\Address"},{"location":"locales/en_GB/#fakerprovideren_gbcompany","text":"echo $faker->vat(); // \"GB123 4567 89\" echo $faker->vat( Company::VAT_TYPE_BRANCH ); // \"GB123 4567 89 012\" echo $faker->vat( Company::VAT_TYPE_GOVERNMENT ); // \"GBGD123\" echo $faker->vat( Company::VAT_TYPE_HEALTH_AUTHORITY ); // \"GBHA567\"","title":"Faker\\Provider\\en_GB\\Company"},{"location":"locales/en_GB/#fakerprovideren_gbpayment","text":"echo $faker->bankAccountNumber(); // \"GB28MLRJ42074399970100\" // Generates a random National Insurance number. echo $faker->nino(); // \"TY179309C\"","title":"Faker\\Provider\\en_GB\\Payment"},{"location":"locales/en_GB/#fakerprovideren_gbphonenumber","text":"echo $faker->mobileNumber(); // \"07720324489\"","title":"Faker\\Provider\\en_GB\\PhoneNumber"},{"location":"locales/en_HK/","text":"English (Hong Kong SAR China) # Faker\\Provider\\en_HK\\Address # // Generates a fake town name based on the words commonly found in Hong Kong echo $faker->town(); // \"Yuen Long\" // Generates a fake village name based on the words commonly found in Hong Kong echo $faker->village(); // \"O Tau\" // Generates a fake estate name based on the words commonly found in Hong Kong echo $faker->estate(); // \"Ching Lai Court\" Faker\\Provider\\en_HK\\Phone # // Generates a Hong Kong mobile number (starting with 5, 6 or 9) echo $faker->mobileNumber(); // \"92150087\" // Generates a Hong Kong landline number (starting with 2 or 3) echo $faker->landlineNumber(); // \"32750132\" // Generates a Hong Kong fax number (starting with 7) echo $faker->faxNumber(); // \"71937729\"","title":"English (Hong Kong SAR China)"},{"location":"locales/en_HK/#english-hong-kong-sar-china","text":"","title":"English (Hong Kong SAR China)"},{"location":"locales/en_HK/#fakerprovideren_hkaddress","text":"// Generates a fake town name based on the words commonly found in Hong Kong echo $faker->town(); // \"Yuen Long\" // Generates a fake village name based on the words commonly found in Hong Kong echo $faker->village(); // \"O Tau\" // Generates a fake estate name based on the words commonly found in Hong Kong echo $faker->estate(); // \"Ching Lai Court\"","title":"Faker\\Provider\\en_HK\\Address"},{"location":"locales/en_HK/#fakerprovideren_hkphone","text":"// Generates a Hong Kong mobile number (starting with 5, 6 or 9) echo $faker->mobileNumber(); // \"92150087\" // Generates a Hong Kong landline number (starting with 2 or 3) echo $faker->landlineNumber(); // \"32750132\" // Generates a Hong Kong fax number (starting with 7) echo $faker->faxNumber(); // \"71937729\"","title":"Faker\\Provider\\en_HK\\Phone"},{"location":"locales/en_IN/","text":"English (India) # Faker\\Provider\\en_IN\\Address # echo $faker->locality(); // \"Vaishali Nagar\" echo $faker->localityName(); // \"Kharadi\" echo $faker->societyName(); // \"Shanti Apartments\" echo $faker->state(); // \"Delhi\" echo $faker->stateAbbr(); // \"DL\" Faker\\Provider\\en_IN\\PhoneNumber # echo $faker->mobileNumber(); // \"09007086397\"","title":"English (India)"},{"location":"locales/en_IN/#english-india","text":"","title":"English (India)"},{"location":"locales/en_IN/#fakerprovideren_inaddress","text":"echo $faker->locality(); // \"Vaishali Nagar\" echo $faker->localityName(); // \"Kharadi\" echo $faker->societyName(); // \"Shanti Apartments\" echo $faker->state(); // \"Delhi\" echo $faker->stateAbbr(); // \"DL\"","title":"Faker\\Provider\\en_IN\\Address"},{"location":"locales/en_IN/#fakerprovideren_inphonenumber","text":"echo $faker->mobileNumber(); // \"09007086397\"","title":"Faker\\Provider\\en_IN\\PhoneNumber"},{"location":"locales/en_NG/","text":"English (Nigeria) # Faker\\Provider\\en_NG\\Address # echo $faker->county(); // 'Edo' echo $faker->region(); // 'Katsina' Faker\\Provider\\en_NG\\Person # // Generates a random person name echo $faker->name(); // 'Oluwunmi Mayowa'","title":"English (Nigeria)"},{"location":"locales/en_NG/#english-nigeria","text":"","title":"English (Nigeria)"},{"location":"locales/en_NG/#fakerprovideren_ngaddress","text":"echo $faker->county(); // 'Edo' echo $faker->region(); // 'Katsina'","title":"Faker\\Provider\\en_NG\\Address"},{"location":"locales/en_NG/#fakerprovideren_ngperson","text":"// Generates a random person name echo $faker->name(); // 'Oluwunmi Mayowa'","title":"Faker\\Provider\\en_NG\\Person"},{"location":"locales/en_NZ/","text":"English (New Zealand) # Faker\\Provider\\en_NZ\\Address # echo $faker->region(); // \"Auckland\" Faker\\Provider\\en_NZ\\Phone # // Generates a cell (mobile) phone number echo $faker->mobileNumber(); // \"021 123 4567\" // Generates a toll free number echo $faker->tollFreeNumber(); // \"0800 123 456\" // Area Code echo $faker->areaCode(); // \"03\"","title":"English (New Zealand)"},{"location":"locales/en_NZ/#english-new-zealand","text":"","title":"English (New Zealand)"},{"location":"locales/en_NZ/#fakerprovideren_nzaddress","text":"echo $faker->region(); // \"Auckland\"","title":"Faker\\Provider\\en_NZ\\Address"},{"location":"locales/en_NZ/#fakerprovideren_nzphone","text":"// Generates a cell (mobile) phone number echo $faker->mobileNumber(); // \"021 123 4567\" // Generates a toll free number echo $faker->tollFreeNumber(); // \"0800 123 456\" // Area Code echo $faker->areaCode(); // \"03\"","title":"Faker\\Provider\\en_NZ\\Phone"},{"location":"locales/en_PH/","text":"English (Philippines) # Faker\\Provider\\en_PH\\Address # echo $faker->province(); // \"Marinduque\" echo $faker->municipality(); // \"Lacub\" echo $faker->barangay(); // \"Poblacion\" Faker\\Provider\\en_PH\\Phone # // Generates a cell (mobile) phone number echo $faker->mobileNumber(); // \"+63 (933) 384-1558\"","title":"English (Philippines)"},{"location":"locales/en_PH/#english-philippines","text":"","title":"English (Philippines)"},{"location":"locales/en_PH/#fakerprovideren_phaddress","text":"echo $faker->province(); // \"Marinduque\" echo $faker->municipality(); // \"Lacub\" echo $faker->barangay(); // \"Poblacion\"","title":"Faker\\Provider\\en_PH\\Address"},{"location":"locales/en_PH/#fakerprovideren_phphone","text":"// Generates a cell (mobile) phone number echo $faker->mobileNumber(); // \"+63 (933) 384-1558\"","title":"Faker\\Provider\\en_PH\\Phone"},{"location":"locales/en_SG/","text":"English (Singapore) # Faker\\Provider\\en_SG\\Address # echo $faker->blockNumber(); // \"Blk 914\" Faker\\Provider\\en_SG\\Person # // Generates a National Registration Identity Card (NRIC) number echo $faker->nric(); // \"S4098150J\" // Generates a Foreign Identification Number (FIN) echo $faker->fin(); // \"G2325088N\" // Generates either NRIC or FIN number depending on the second argument echo $faker->singaporeId(new \\DateTime('2005-03-01'), $faker->boolean()); // \"T0550799A\" Faker\\Provider\\en_SG\\PhoneNumber # echo $faker->tollFreeInternationalNumber(); // \"800 520 9659\" echo $faker->tollFreeLineNumber(); // \"1800 331 6934\" echo $faker->premiumPhoneNumber(); // \"1900 219 6547\" echo $faker->mobileNumber(); // \"9207 0603\" echo $faker->fixedLineNumber(); // \"6752 8659\" echo $faker->voipNumber(); // \"3384 1228","title":"English (Singapore)"},{"location":"locales/en_SG/#english-singapore","text":"","title":"English (Singapore)"},{"location":"locales/en_SG/#fakerprovideren_sgaddress","text":"echo $faker->blockNumber(); // \"Blk 914\"","title":"Faker\\Provider\\en_SG\\Address"},{"location":"locales/en_SG/#fakerprovideren_sgperson","text":"// Generates a National Registration Identity Card (NRIC) number echo $faker->nric(); // \"S4098150J\" // Generates a Foreign Identification Number (FIN) echo $faker->fin(); // \"G2325088N\" // Generates either NRIC or FIN number depending on the second argument echo $faker->singaporeId(new \\DateTime('2005-03-01'), $faker->boolean()); // \"T0550799A\"","title":"Faker\\Provider\\en_SG\\Person"},{"location":"locales/en_SG/#fakerprovideren_sgphonenumber","text":"echo $faker->tollFreeInternationalNumber(); // \"800 520 9659\" echo $faker->tollFreeLineNumber(); // \"1800 331 6934\" echo $faker->premiumPhoneNumber(); // \"1900 219 6547\" echo $faker->mobileNumber(); // \"9207 0603\" echo $faker->fixedLineNumber(); // \"6752 8659\" echo $faker->voipNumber(); // \"3384 1228","title":"Faker\\Provider\\en_SG\\PhoneNumber"},{"location":"locales/en_UG/","text":"English (Uganda) # Faker\\Provider\\en_UG\\Address # echo $faker->district(); // \"Kabarole\" echo $faker->region(); // \"North\"","title":"English (Uganda)"},{"location":"locales/en_UG/#english-uganda","text":"","title":"English (Uganda)"},{"location":"locales/en_UG/#fakerprovideren_ugaddress","text":"echo $faker->district(); // \"Kabarole\" echo $faker->region(); // \"North\"","title":"Faker\\Provider\\en_UG\\Address"},{"location":"locales/en_US/","text":"English (United States) # Faker\\Provider\\en_US\\Company # // Generate a random Employer Identification Number echo $faker->ein(); // '12-3456789' Faker\\Provider\\en_US\\Payment # echo $faker->bankAccountNumber(); // '51915734310' echo $faker->bankRoutingNumber(); // '212240302' Faker\\Provider\\en_US\\Person # // Generates a random Social Security Number echo $faker->ssn(); // '123-45-6789'","title":"English (United States)"},{"location":"locales/en_US/#english-united-states","text":"","title":"English (United States)"},{"location":"locales/en_US/#fakerprovideren_uscompany","text":"// Generate a random Employer Identification Number echo $faker->ein(); // '12-3456789'","title":"Faker\\Provider\\en_US\\Company"},{"location":"locales/en_US/#fakerprovideren_uspayment","text":"echo $faker->bankAccountNumber(); // '51915734310' echo $faker->bankRoutingNumber(); // '212240302'","title":"Faker\\Provider\\en_US\\Payment"},{"location":"locales/en_US/#fakerprovideren_usperson","text":"// Generates a random Social Security Number echo $faker->ssn(); // '123-45-6789'","title":"Faker\\Provider\\en_US\\Person"},{"location":"locales/en_ZA/","text":"English (South Africa) # Faker\\Provider\\en_ZA\\Company # // Generates a random company registration number echo $faker->companyNumber(); // 1999/789634/01 Faker\\Provider\\en_ZA\\Person # // Generates a random national identification number echo $faker->idNumber(); // 6606192211041 // Generates a random valid licence code echo $faker->licenceCode(); // EB Faker\\Provider\\en_ZA\\PhoneNumber # // Generates a special rate toll free phone number echo $faker->tollFreeNumber(); // 0800 555 5555 // Generates a mobile phone number echo $faker->mobileNumber(); // 082 123 5555","title":"English (South Africa)"},{"location":"locales/en_ZA/#english-south-africa","text":"","title":"English (South Africa)"},{"location":"locales/en_ZA/#fakerprovideren_zacompany","text":"// Generates a random company registration number echo $faker->companyNumber(); // 1999/789634/01","title":"Faker\\Provider\\en_ZA\\Company"},{"location":"locales/en_ZA/#fakerprovideren_zaperson","text":"// Generates a random national identification number echo $faker->idNumber(); // 6606192211041 // Generates a random valid licence code echo $faker->licenceCode(); // EB","title":"Faker\\Provider\\en_ZA\\Person"},{"location":"locales/en_ZA/#fakerprovideren_zaphonenumber","text":"// Generates a special rate toll free phone number echo $faker->tollFreeNumber(); // 0800 555 5555 // Generates a mobile phone number echo $faker->mobileNumber(); // 082 123 5555","title":"Faker\\Provider\\en_ZA\\PhoneNumber"},{"location":"locales/es_ES/","text":"Spanish (Spain) # Faker\\Provider\\es_ES\\Person # // Generates a Documento Nacional de Identidad (DNI) number echo $faker->dni(); // '77446565E' // Generates a random valid licence code echo $faker->licenceCode(); // B Faker\\Provider\\es_ES\\Payment # echo $faker->bankAccountNumber(); // \"ES5285748762396535068585\" // Generates a C\u00f3digo de identificaci\u00f3n Fiscal (CIF) number echo $faker->vat(); // \"A35864370\" Faker\\Provider\\es_ES\\PhoneNumber # // Generates a special rate toll free phone number echo $faker->tollFreeNumber(); // 900 123 456 // Generates a mobile phone number echo $faker->mobileNumber(); // +34 612 12 24","title":"Spanish (Spain)"},{"location":"locales/es_ES/#spanish-spain","text":"","title":"Spanish (Spain)"},{"location":"locales/es_ES/#fakerprovideres_esperson","text":"// Generates a Documento Nacional de Identidad (DNI) number echo $faker->dni(); // '77446565E' // Generates a random valid licence code echo $faker->licenceCode(); // B","title":"Faker\\Provider\\es_ES\\Person"},{"location":"locales/es_ES/#fakerprovideres_espayment","text":"echo $faker->bankAccountNumber(); // \"ES5285748762396535068585\" // Generates a C\u00f3digo de identificaci\u00f3n Fiscal (CIF) number echo $faker->vat(); // \"A35864370\"","title":"Faker\\Provider\\es_ES\\Payment"},{"location":"locales/es_ES/#fakerprovideres_esphonenumber","text":"// Generates a special rate toll free phone number echo $faker->tollFreeNumber(); // 900 123 456 // Generates a mobile phone number echo $faker->mobileNumber(); // +34 612 12 24","title":"Faker\\Provider\\es_ES\\PhoneNumber"},{"location":"locales/es_PE/","text":"Spanish (Peru) # Faker\\Provider\\es_PE\\Person # // Generates a Peruvian Documento Nacional de Identidad (DNI) number echo $faker->dni(); // '83367512' Faker\\Provider\\es_PE\\Company # // Generates a Peruvian REG. UNICO DE CONTRIBUYENTES (RUC) number echo $faker->ruc(); // '20105895410' Faker\\Provider\\es_PE\\Company # // Generates a Peruvian REG. UNICO DE CONTRIBUYENTES (RUC) number echo $faker->ruc(true); // '10105895410' Faker\\Provider\\es_PE\\Company # // Generates a REG. UNICO DE CONTRIBUYENTES (RUC) number echo $faker->ruc(false); // '20105895410'","title":"Spanish (Peru)"},{"location":"locales/es_PE/#spanish-peru","text":"","title":"Spanish (Peru)"},{"location":"locales/es_PE/#fakerprovideres_peperson","text":"// Generates a Peruvian Documento Nacional de Identidad (DNI) number echo $faker->dni(); // '83367512'","title":"Faker\\Provider\\es_PE\\Person"},{"location":"locales/es_PE/#fakerprovideres_pecompany","text":"// Generates a Peruvian REG. UNICO DE CONTRIBUYENTES (RUC) number echo $faker->ruc(); // '20105895410'","title":"Faker\\Provider\\es_PE\\Company"},{"location":"locales/es_PE/#fakerprovideres_pecompany_1","text":"// Generates a Peruvian REG. UNICO DE CONTRIBUYENTES (RUC) number echo $faker->ruc(true); // '10105895410'","title":"Faker\\Provider\\es_PE\\Company"},{"location":"locales/es_PE/#fakerprovideres_pecompany_2","text":"// Generates a REG. UNICO DE CONTRIBUYENTES (RUC) number echo $faker->ruc(false); // '20105895410'","title":"Faker\\Provider\\es_PE\\Company"},{"location":"locales/es_VE/","text":"Spanish (Venezuela) # Faker\\Provider\\es_VE\\Person # // Generate a C\u00e9dula de identidad number, you can pass one argument to add separator echo $faker->nationalId(); // 'V11223344' Faker\\Provider\\es_VE\\Company # // Generates a R.I.F. number, you can pass one argument to add separators echo $faker->taxpayerIdentificationNumber(); // 'J1234567891'","title":"Spanish (Venezuela)"},{"location":"locales/es_VE/#spanish-venezuela","text":"","title":"Spanish (Venezuela)"},{"location":"locales/es_VE/#fakerprovideres_veperson","text":"// Generate a C\u00e9dula de identidad number, you can pass one argument to add separator echo $faker->nationalId(); // 'V11223344'","title":"Faker\\Provider\\es_VE\\Person"},{"location":"locales/es_VE/#fakerprovideres_vecompany","text":"// Generates a R.I.F. number, you can pass one argument to add separators echo $faker->taxpayerIdentificationNumber(); // 'J1234567891'","title":"Faker\\Provider\\es_VE\\Company"},{"location":"locales/fa_IR/","text":"Persian (Iran) # Faker\\Provider\\fa_IR\\Person # // Generates a valid nationalCode echo $faker->nationalCode(); // \"0078475759\" Faker\\Provider\\fa_IR\\Address # // Generates a random building name echo $faker->building(); // \"\u0633\u0627\u062e\u062a\u0645\u0627\u0646 \u0622\u0641\u062a\u0627\u0628\" // Returns a random city name echo $faker->city(); // \"\u0627\u0633\u062a\u0627\u0646 \u0632\u0646\u062c\u0627\u0646\" Faker\\Provider\\fa_IR\\Company # // Generates a random contract type echo $faker->contract(); // \"\u0631\u0633\u0645\u06cc\"","title":"Persian (Iran)"},{"location":"locales/fa_IR/#persian-iran","text":"","title":"Persian (Iran)"},{"location":"locales/fa_IR/#fakerproviderfa_irperson","text":"// Generates a valid nationalCode echo $faker->nationalCode(); // \"0078475759\"","title":"Faker\\Provider\\fa_IR\\Person"},{"location":"locales/fa_IR/#fakerproviderfa_iraddress","text":"// Generates a random building name echo $faker->building(); // \"\u0633\u0627\u062e\u062a\u0645\u0627\u0646 \u0622\u0641\u062a\u0627\u0628\" // Returns a random city name echo $faker->city(); // \"\u0627\u0633\u062a\u0627\u0646 \u0632\u0646\u062c\u0627\u0646\"","title":"Faker\\Provider\\fa_IR\\Address"},{"location":"locales/fa_IR/#fakerproviderfa_ircompany","text":"// Generates a random contract type echo $faker->contract(); // \"\u0631\u0633\u0645\u06cc\"","title":"Faker\\Provider\\fa_IR\\Company"},{"location":"locales/fi_FI/","text":"Finnish (Finland) # Faker\\Provider\\fi_FI\\Payment # // Generates a random bank account number echo $faker->bankAccountNumber(); // \"FI8350799879879616\" Faker\\Provider\\fi_FI\\Person # // Generates a valid Finnish personal identity number (in Finnish - Henkil\u00f6tunnus) echo $faker->personalIdentityNumber() // '170974-007J' // Since the numbers are different for male and female persons, optionally you can specify gender. echo $faker->personalIdentityNumber(\\DateTime::createFromFormat('Y-m-d', '2015-12-14'), 'female') // '141215A520B'","title":"Finnish (Finland)"},{"location":"locales/fi_FI/#finnish-finland","text":"","title":"Finnish (Finland)"},{"location":"locales/fi_FI/#fakerproviderfi_fipayment","text":"// Generates a random bank account number echo $faker->bankAccountNumber(); // \"FI8350799879879616\"","title":"Faker\\Provider\\fi_FI\\Payment"},{"location":"locales/fi_FI/#fakerproviderfi_fiperson","text":"// Generates a valid Finnish personal identity number (in Finnish - Henkil\u00f6tunnus) echo $faker->personalIdentityNumber() // '170974-007J' // Since the numbers are different for male and female persons, optionally you can specify gender. echo $faker->personalIdentityNumber(\\DateTime::createFromFormat('Y-m-d', '2015-12-14'), 'female') // '141215A520B'","title":"Faker\\Provider\\fi_FI\\Person"},{"location":"locales/fr_BE/","text":"French (Belgium) # Faker\\Provider\\fr_BE\\Address # echo $faker->province(); // \"Brabant wallon\" echo $faker->cityName(); // \"La Roche-en-Ardenne\" Faker\\Provider\\fr_BE\\Company # echo $faker->company(); // \"Timmermans SA\" echo $faker->companySuffix(); // \"ASBL\" Faker\\Provider\\fr_BE\\Internet # echo $faker->tld(); // \"be\" Faker\\Provider\\fr_BE\\Payment # // IBAN for a Belgian bank account. Will always start with \"BE\". echo $faker->bankAccountNumber(); // \"BE22800006647946\" // VAT number. echo $faker->vat(); // \"BE 0123456789\" // Same as above but without any space between country code and number. echo $faker->vat(false); // \"BE0123456789\" Faker\\Provider\\fr_BE\\Person # echo $faker->firstNameFemale(); // \"Marion\" echo $faker->firstNameMale(); // \"Maxime\" echo $faker->lastName(); // \"Janssens\" echo $faker->titleFemale(); // \"Dr.\" echo $faker->titleMale(); // \"M.\" Faker\\Provider\\fr_BE\\PhoneNumber # echo $faker->phoneNumber(); // \"+32(0)2 9398787\"","title":"French (Belgium)"},{"location":"locales/fr_BE/#french-belgium","text":"","title":"French (Belgium)"},{"location":"locales/fr_BE/#fakerproviderfr_beaddress","text":"echo $faker->province(); // \"Brabant wallon\" echo $faker->cityName(); // \"La Roche-en-Ardenne\"","title":"Faker\\Provider\\fr_BE\\Address"},{"location":"locales/fr_BE/#fakerproviderfr_becompany","text":"echo $faker->company(); // \"Timmermans SA\" echo $faker->companySuffix(); // \"ASBL\"","title":"Faker\\Provider\\fr_BE\\Company"},{"location":"locales/fr_BE/#fakerproviderfr_beinternet","text":"echo $faker->tld(); // \"be\"","title":"Faker\\Provider\\fr_BE\\Internet"},{"location":"locales/fr_BE/#fakerproviderfr_bepayment","text":"// IBAN for a Belgian bank account. Will always start with \"BE\". echo $faker->bankAccountNumber(); // \"BE22800006647946\" // VAT number. echo $faker->vat(); // \"BE 0123456789\" // Same as above but without any space between country code and number. echo $faker->vat(false); // \"BE0123456789\"","title":"Faker\\Provider\\fr_BE\\Payment"},{"location":"locales/fr_BE/#fakerproviderfr_beperson","text":"echo $faker->firstNameFemale(); // \"Marion\" echo $faker->firstNameMale(); // \"Maxime\" echo $faker->lastName(); // \"Janssens\" echo $faker->titleFemale(); // \"Dr.\" echo $faker->titleMale(); // \"M.\"","title":"Faker\\Provider\\fr_BE\\Person"},{"location":"locales/fr_BE/#fakerproviderfr_bephonenumber","text":"echo $faker->phoneNumber(); // \"+32(0)2 9398787\"","title":"Faker\\Provider\\fr_BE\\PhoneNumber"},{"location":"locales/fr_CH/","text":"French (Switzerland) # Faker\\Provider\\fr_CH\\Payment # echo $faker->bankAccountNumber(); // \"CH28167004ZG2ZU4X0H47\" Faker\\Provider\\fr_CH\\Person # // Generates a random AVS13/AHV13 social security number echo $faker->avs13(); // \"756.1234.5678.97\"","title":"French (Switzerland)"},{"location":"locales/fr_CH/#french-switzerland","text":"","title":"French (Switzerland)"},{"location":"locales/fr_CH/#fakerproviderfr_chpayment","text":"echo $faker->bankAccountNumber(); // \"CH28167004ZG2ZU4X0H47\"","title":"Faker\\Provider\\fr_CH\\Payment"},{"location":"locales/fr_CH/#fakerproviderfr_chperson","text":"// Generates a random AVS13/AHV13 social security number echo $faker->avs13(); // \"756.1234.5678.97\"","title":"Faker\\Provider\\fr_CH\\Person"},{"location":"locales/fr_FR/","text":"French (France) # Faker\\Provider\\fr_FR\\Address # // Generates a random department name echo $faker->departmentName(); // \"Haut-Rhin\" // Generates a random department number echo $faker->departmentNumber(); // \"2B\" // Generates a random department info (department number => department name) $faker->department(); // ['18' => 'Cher']; // Generates a random region echo $faker->region(); // \"Saint-Pierre-et-Miquelon\" // Generates a random appartement, stair echo $faker->secondaryAddress(); // \"Bat. 961\" Faker\\Provider\\fr_FR\\Company # // Generates a random SIREN number echo $faker->siren(); // 082 250 104 // Generates a random SIRET number echo $faker->siret(); // 347 355 708 00224 Faker\\Provider\\fr_FR\\Payment # echo $faker->bankAccountNumber; // \"FR982713192809U43A8QR4OJ923\" // Generates a random VAT echo $faker->vat(); // FR 12 123 456 789 Faker\\Provider\\fr_FR\\Person # // Generates a random NIR / S\u00e9curit\u00e9 Sociale number echo $faker->nir(); // 1 88 07 35 127 571 - 19 Faker\\Provider\\fr_FR\\PhoneNumber # // Generates phone numbers echo $faker->phoneNumber(); // +33 (0)1 67 97 01 31 echo $faker->mobileNumber(); // +33 6 21 12 72 84 echo $faker->serviceNumber(); // 08 98 04 84 46","title":"French (France)"},{"location":"locales/fr_FR/#french-france","text":"","title":"French (France)"},{"location":"locales/fr_FR/#fakerproviderfr_fraddress","text":"// Generates a random department name echo $faker->departmentName(); // \"Haut-Rhin\" // Generates a random department number echo $faker->departmentNumber(); // \"2B\" // Generates a random department info (department number => department name) $faker->department(); // ['18' => 'Cher']; // Generates a random region echo $faker->region(); // \"Saint-Pierre-et-Miquelon\" // Generates a random appartement, stair echo $faker->secondaryAddress(); // \"Bat. 961\"","title":"Faker\\Provider\\fr_FR\\Address"},{"location":"locales/fr_FR/#fakerproviderfr_frcompany","text":"// Generates a random SIREN number echo $faker->siren(); // 082 250 104 // Generates a random SIRET number echo $faker->siret(); // 347 355 708 00224","title":"Faker\\Provider\\fr_FR\\Company"},{"location":"locales/fr_FR/#fakerproviderfr_frpayment","text":"echo $faker->bankAccountNumber; // \"FR982713192809U43A8QR4OJ923\" // Generates a random VAT echo $faker->vat(); // FR 12 123 456 789","title":"Faker\\Provider\\fr_FR\\Payment"},{"location":"locales/fr_FR/#fakerproviderfr_frperson","text":"// Generates a random NIR / S\u00e9curit\u00e9 Sociale number echo $faker->nir(); // 1 88 07 35 127 571 - 19","title":"Faker\\Provider\\fr_FR\\Person"},{"location":"locales/fr_FR/#fakerproviderfr_frphonenumber","text":"// Generates phone numbers echo $faker->phoneNumber(); // +33 (0)1 67 97 01 31 echo $faker->mobileNumber(); // +33 6 21 12 72 84 echo $faker->serviceNumber(); // 08 98 04 84 46","title":"Faker\\Provider\\fr_FR\\PhoneNumber"},{"location":"locales/he_IL/","text":"Hebrew (Israel) # Faker\\Provider\\he_IL\\Payment # echo $faker->bankAccountNumber(); // \"IL392237392219429527697\"","title":"Hebrew (Israel)"},{"location":"locales/he_IL/#hebrew-israel","text":"","title":"Hebrew (Israel)"},{"location":"locales/he_IL/#fakerproviderhe_ilpayment","text":"echo $faker->bankAccountNumber(); // \"IL392237392219429527697\"","title":"Faker\\Provider\\he_IL\\Payment"},{"location":"locales/hr_HR/","text":"Croatian (Croatia) # Faker\\Provider\\hr_HR\\Payment # echo $faker->bankAccountNumber(); // \"HR3789114847226078672\"","title":"Croatian (Croatia)"},{"location":"locales/hr_HR/#croatian-croatia","text":"","title":"Croatian (Croatia)"},{"location":"locales/hr_HR/#fakerproviderhr_hrpayment","text":"echo $faker->bankAccountNumber(); // \"HR3789114847226078672\"","title":"Faker\\Provider\\hr_HR\\Payment"},{"location":"locales/hu_HU/","text":"Hungarian (Hungary) # Faker\\Provider\\hu_HU\\Payment # // Generates a random bank account number echo $faker->bankAccountNumber(); // \"HU09904437680048220079300783\"","title":"Hungarian (Hungary)"},{"location":"locales/hu_HU/#hungarian-hungary","text":"","title":"Hungarian (Hungary)"},{"location":"locales/hu_HU/#fakerproviderhu_hupayment","text":"// Generates a random bank account number echo $faker->bankAccountNumber(); // \"HU09904437680048220079300783\"","title":"Faker\\Provider\\hu_HU\\Payment"},{"location":"locales/id_ID/","text":"Indonesian (Indonesia) # Faker\\Provider\\id_ID\\Person # // Generates a random Nomor Induk Kependudukan (NIK) // first argument is gender, either Person::GENDER_MALE or Person::GENDER_FEMALE, if none specified random gender is used // second argument is birth date (DateTime object), if none specified, random birth date is used echo $faker->nik(); // \"8522246001570940\"","title":"Indonesian (Indonesia)"},{"location":"locales/id_ID/#indonesian-indonesia","text":"","title":"Indonesian (Indonesia)"},{"location":"locales/id_ID/#fakerproviderid_idperson","text":"// Generates a random Nomor Induk Kependudukan (NIK) // first argument is gender, either Person::GENDER_MALE or Person::GENDER_FEMALE, if none specified random gender is used // second argument is birth date (DateTime object), if none specified, random birth date is used echo $faker->nik(); // \"8522246001570940\"","title":"Faker\\Provider\\id_ID\\Person"},{"location":"locales/is_IS/","text":"Icelandic (Iceland) # Faker\\Provider\\is_IS\\Payment # echo $faker->bankAccountNumber(); // \"IS772061465007570166313591\"","title":"Icelandic (Iceland)"},{"location":"locales/is_IS/#icelandic-iceland","text":"","title":"Icelandic (Iceland)"},{"location":"locales/is_IS/#fakerprovideris_ispayment","text":"echo $faker->bankAccountNumber(); // \"IS772061465007570166313591\"","title":"Faker\\Provider\\is_IS\\Payment"},{"location":"locales/it_CH/","text":"Italian (Switzerland) # Faker\\Provider\\it_CH\\Payment # echo $faker->bankAccountNumber(); // \"CH28167004ZG2ZU4X0H47\" Faker\\Provider\\it_CH\\Person # // Generates a random AVS13/AHV13 social security number echo $faker->avs13(); // \"756.1234.5678.97\"","title":"Italian (Switzerland)"},{"location":"locales/it_CH/#italian-switzerland","text":"","title":"Italian (Switzerland)"},{"location":"locales/it_CH/#fakerproviderit_chpayment","text":"echo $faker->bankAccountNumber(); // \"CH28167004ZG2ZU4X0H47\"","title":"Faker\\Provider\\it_CH\\Payment"},{"location":"locales/it_CH/#fakerproviderit_chperson","text":"// Generates a random AVS13/AHV13 social security number echo $faker->avs13(); // \"756.1234.5678.97\"","title":"Faker\\Provider\\it_CH\\Person"},{"location":"locales/it_IT/","text":"Italian (Italy) # Faker\\Provider\\it_IT\\Company # // Generates a random Vat Id echo $faker->vatId(); // \"IT98746784967\" Faker\\Provider\\it_IT\\Payment # echo $faker->bankAccountNumber(); // \"IT53H9229628427XEQQOX0CU8Z0\" Faker\\Provider\\it_IT\\Person # // Generates a random Tax Id code (Codice fiscale) echo $faker->taxId(); // \"DIXDPZ44E08F367A\"","title":"Italian (Italy)"},{"location":"locales/it_IT/#italian-italy","text":"","title":"Italian (Italy)"},{"location":"locales/it_IT/#fakerproviderit_itcompany","text":"// Generates a random Vat Id echo $faker->vatId(); // \"IT98746784967\"","title":"Faker\\Provider\\it_IT\\Company"},{"location":"locales/it_IT/#fakerproviderit_itpayment","text":"echo $faker->bankAccountNumber(); // \"IT53H9229628427XEQQOX0CU8Z0\"","title":"Faker\\Provider\\it_IT\\Payment"},{"location":"locales/it_IT/#fakerproviderit_itperson","text":"// Generates a random Tax Id code (Codice fiscale) echo $faker->taxId(); // \"DIXDPZ44E08F367A\"","title":"Faker\\Provider\\it_IT\\Person"},{"location":"locales/ja_JP/","text":"Japanese (Japan) # Faker\\Provider\\ja_JP\\Person # // Generates a 'kana' name echo $faker->kanaName($gender = null|'male'|'female'); // \"\u30a2\u30aa\u30bf \u30df\u30ce\u30eb\" // Generates a 'kana' first name echo $faker->firstKanaName($gender = null|'male'|'female'); // \"\u30d2\u30c7\u30ad\" // Generates a 'kana' first name on the male echo $faker->firstKanaNameMale(); // \"\u30d2\u30c7\u30ad\" // Generates a 'kana' first name on the female echo $faker->firstKanaNameFemale(); // \"\u30de\u30a2\u30e4\" // Generates a 'kana' last name echo $faker->lastKanaName(); // \"\u30ca\u30ab\u30b8\u30de\"","title":"Japanese (Japan)"},{"location":"locales/ja_JP/#japanese-japan","text":"","title":"Japanese (Japan)"},{"location":"locales/ja_JP/#fakerproviderja_jpperson","text":"// Generates a 'kana' name echo $faker->kanaName($gender = null|'male'|'female'); // \"\u30a2\u30aa\u30bf \u30df\u30ce\u30eb\" // Generates a 'kana' first name echo $faker->firstKanaName($gender = null|'male'|'female'); // \"\u30d2\u30c7\u30ad\" // Generates a 'kana' first name on the male echo $faker->firstKanaNameMale(); // \"\u30d2\u30c7\u30ad\" // Generates a 'kana' first name on the female echo $faker->firstKanaNameFemale(); // \"\u30de\u30a2\u30e4\" // Generates a 'kana' last name echo $faker->lastKanaName(); // \"\u30ca\u30ab\u30b8\u30de\"","title":"Faker\\Provider\\ja_JP\\Person"},{"location":"locales/ka_GE/","text":"Georgian (Georgia) # Faker\\Provider\\ka_GE\\Payment # // Generates a random bank account number echo $faker->bankAccountNumber(); // \"GE33ZV9773853617253389\"","title":"Georgian (Georgia)"},{"location":"locales/ka_GE/#georgian-georgia","text":"","title":"Georgian (Georgia)"},{"location":"locales/ka_GE/#fakerproviderka_gepayment","text":"// Generates a random bank account number echo $faker->bankAccountNumber(); // \"GE33ZV9773853617253389\"","title":"Faker\\Provider\\ka_GE\\Payment"},{"location":"locales/kk_KZ/","text":"Kazakh (Kazakhstan) # Faker\\Provider\\kk_KZ\\Company # // Generates an business identification number echo $faker->businessIdentificationNumber(); // \"150140000019\" Faker\\Provider\\kk_KZ\\Payment # // Generates a random bank name echo $faker->bank(); // \"\u049a\u0430\u0437\u043a\u043e\u043c\u043c\u0435\u0440\u0446\u0431\u0430\u043d\u043a\" // Generates a random bank account number echo $faker->bankAccountNumber(); // \"KZ1076321LO4H6X41I37\" Faker\\Provider\\kk_KZ\\Person # // Generates an individual identification number echo $faker->individualIdentificationNumber(); // \"780322300455\" // Generates an individual identification number based on his/her birth date echo $faker->individualIdentificationNumber(new \\DateTime('1999-03-01')); // \"990301300455\"","title":"Kazakh (Kazakhstan)"},{"location":"locales/kk_KZ/#kazakh-kazakhstan","text":"","title":"Kazakh (Kazakhstan)"},{"location":"locales/kk_KZ/#fakerproviderkk_kzcompany","text":"// Generates an business identification number echo $faker->businessIdentificationNumber(); // \"150140000019\"","title":"Faker\\Provider\\kk_KZ\\Company"},{"location":"locales/kk_KZ/#fakerproviderkk_kzpayment","text":"// Generates a random bank name echo $faker->bank(); // \"\u049a\u0430\u0437\u043a\u043e\u043c\u043c\u0435\u0440\u0446\u0431\u0430\u043d\u043a\" // Generates a random bank account number echo $faker->bankAccountNumber(); // \"KZ1076321LO4H6X41I37\"","title":"Faker\\Provider\\kk_KZ\\Payment"},{"location":"locales/kk_KZ/#fakerproviderkk_kzperson","text":"// Generates an individual identification number echo $faker->individualIdentificationNumber(); // \"780322300455\" // Generates an individual identification number based on his/her birth date echo $faker->individualIdentificationNumber(new \\DateTime('1999-03-01')); // \"990301300455\"","title":"Faker\\Provider\\kk_KZ\\Person"},{"location":"locales/ko_KR/","text":"Korean (South Korea) # Faker\\Provider\\ko_KR\\Address # // Generates a metropolitan city echo $faker->metropolitanCity(); // \"\uc11c\uc6b8\ud2b9\ubcc4\uc2dc\" // Generates a borough echo $faker->borough(); // \"\uac15\ub0a8\uad6c\" Faker\\Provider\\ko_KR\\PhoneNumber # // Generates a local area phone numer echo $faker->localAreaPhoneNumber(); // \"02-1234-4567\" // Generates a cell phone number echo $faker->cellPhoneNumber(); // \"010-9876-5432\"","title":"Korean (South Korea)"},{"location":"locales/ko_KR/#korean-south-korea","text":"","title":"Korean (South Korea)"},{"location":"locales/ko_KR/#fakerproviderko_kraddress","text":"// Generates a metropolitan city echo $faker->metropolitanCity(); // \"\uc11c\uc6b8\ud2b9\ubcc4\uc2dc\" // Generates a borough echo $faker->borough(); // \"\uac15\ub0a8\uad6c\"","title":"Faker\\Provider\\ko_KR\\Address"},{"location":"locales/ko_KR/#fakerproviderko_krphonenumber","text":"// Generates a local area phone numer echo $faker->localAreaPhoneNumber(); // \"02-1234-4567\" // Generates a cell phone number echo $faker->cellPhoneNumber(); // \"010-9876-5432\"","title":"Faker\\Provider\\ko_KR\\PhoneNumber"},{"location":"locales/lt_LT/","text":"Lithuanian (Lithuania) # Faker\\Provider\\lt_LT\\Payment # echo $faker->bankAccountNumber(); // \"LT300848876740317118\"","title":"Lithuanian (Lithuania)"},{"location":"locales/lt_LT/#lithuanian-lithuania","text":"","title":"Lithuanian (Lithuania)"},{"location":"locales/lt_LT/#fakerproviderlt_ltpayment","text":"echo $faker->bankAccountNumber(); // \"LT300848876740317118\"","title":"Faker\\Provider\\lt_LT\\Payment"},{"location":"locales/lv_LV/","text":"Latvian (Latvia) # Faker\\Provider\\lv_LV\\Payment # echo $faker->bankAccountNumber(); // \"LV56XUHF3FI0W5413NIP0\" Faker\\Provider\\lv_LV\\Person # // Generates a random personal identity card number echo $faker->personalIdentityNumber(); // \"140190-12301\"","title":"Latvian (Latvia)"},{"location":"locales/lv_LV/#latvian-latvia","text":"","title":"Latvian (Latvia)"},{"location":"locales/lv_LV/#fakerproviderlv_lvpayment","text":"echo $faker->bankAccountNumber(); // \"LV56XUHF3FI0W5413NIP0\"","title":"Faker\\Provider\\lv_LV\\Payment"},{"location":"locales/lv_LV/#fakerproviderlv_lvperson","text":"// Generates a random personal identity card number echo $faker->personalIdentityNumber(); // \"140190-12301\"","title":"Faker\\Provider\\lv_LV\\Person"},{"location":"locales/me_ME/","text":"Montenegrin (Montenegro) # Faker\\Provider\\me_ME\\Payment # echo $faker->bankAccountNumber(); // \"ME62304676623331330300\"","title":"Montenegrin (Montenegro)"},{"location":"locales/me_ME/#montenegrin-montenegro","text":"","title":"Montenegrin (Montenegro)"},{"location":"locales/me_ME/#fakerproviderme_mepayment","text":"echo $faker->bankAccountNumber(); // \"ME62304676623331330300\"","title":"Faker\\Provider\\me_ME\\Payment"},{"location":"locales/ms_MY/","text":"Malay (Malaysia) # Faker\\Provider\\ms_MY\\Address # // Generates a random Malaysian township echo $faker->township(); // \"Taman Bahagia\" // Generates a random Malaysian town address with matching postcode and state echo $faker->townState(); // \"55100 Bukit Bintang, Kuala Lumpur\" Faker\\Provider\\ms_MY\\Miscellaneous # // Generates a random vehicle license plate number echo $faker->jpjNumberPlate(); // \"WPL 5169\" Faker\\Provider\\ms_MY\\Payment # // Generates a random Malaysian bank echo $faker->bank(); // \"Maybank\" // Generates a random Malaysian bank account number (10-16 digits) echo $faker->bankAccountNumber(); // \"1234567890123456\" // Generates a random Malaysian insurance company echo $faker->insurance(); // \"AIA Malaysia\" // Generates a random Malaysian bank SWIFT Code echo $faker->swiftCode(); // \"MBBEMYKLXXX\" Faker\\Provider\\ms_MY\\Person # // Generates a random personal identity card (myKad) number echo $faker->myKadNumber($gender = null|'male'|'female', $hyphen = null|true|false); // \"710703471796\" Faker\\Provider\\ms_MY\\PhoneNumber # // Generates a random Malaysian mobile number echo $faker->mobileNumber($countryCodePrefix = null|true|false, $formatting = null|true|false); // \"+6012-705 3767\" // Generates a random Malaysian landline number echo $faker->fixedLineNumber($countryCodePrefix = null|true|false, $formatting = null|true|false); // \"03-7112 0455\" // Generates a random Malaysian voip number echo $faker->voipNumber($countryCodePrefix = null|true|false, $formatting = null|true|false); // \"015-458 7099\"","title":"Malay (Malaysia)"},{"location":"locales/ms_MY/#malay-malaysia","text":"","title":"Malay (Malaysia)"},{"location":"locales/ms_MY/#fakerproviderms_myaddress","text":"// Generates a random Malaysian township echo $faker->township(); // \"Taman Bahagia\" // Generates a random Malaysian town address with matching postcode and state echo $faker->townState(); // \"55100 Bukit Bintang, Kuala Lumpur\"","title":"Faker\\Provider\\ms_MY\\Address"},{"location":"locales/ms_MY/#fakerproviderms_mymiscellaneous","text":"// Generates a random vehicle license plate number echo $faker->jpjNumberPlate(); // \"WPL 5169\"","title":"Faker\\Provider\\ms_MY\\Miscellaneous"},{"location":"locales/ms_MY/#fakerproviderms_mypayment","text":"// Generates a random Malaysian bank echo $faker->bank(); // \"Maybank\" // Generates a random Malaysian bank account number (10-16 digits) echo $faker->bankAccountNumber(); // \"1234567890123456\" // Generates a random Malaysian insurance company echo $faker->insurance(); // \"AIA Malaysia\" // Generates a random Malaysian bank SWIFT Code echo $faker->swiftCode(); // \"MBBEMYKLXXX\"","title":"Faker\\Provider\\ms_MY\\Payment"},{"location":"locales/ms_MY/#fakerproviderms_myperson","text":"// Generates a random personal identity card (myKad) number echo $faker->myKadNumber($gender = null|'male'|'female', $hyphen = null|true|false); // \"710703471796\"","title":"Faker\\Provider\\ms_MY\\Person"},{"location":"locales/ms_MY/#fakerproviderms_myphonenumber","text":"// Generates a random Malaysian mobile number echo $faker->mobileNumber($countryCodePrefix = null|true|false, $formatting = null|true|false); // \"+6012-705 3767\" // Generates a random Malaysian landline number echo $faker->fixedLineNumber($countryCodePrefix = null|true|false, $formatting = null|true|false); // \"03-7112 0455\" // Generates a random Malaysian voip number echo $faker->voipNumber($countryCodePrefix = null|true|false, $formatting = null|true|false); // \"015-458 7099\"","title":"Faker\\Provider\\ms_MY\\PhoneNumber"},{"location":"locales/nb_NO/","text":"Norwegian Bokm\u00e5l (Norway) # Faker\\Provider\\nb_NO\\MobileNumber # // Generates a random Norwegian mobile phone number echo $faker->mobileNumber(); // \"+4799988777\" echo $faker->mobileNumber(); // \"999 88 777\" echo $faker->mobileNumber(); // \"99988777\" Faker\\Provider\\nb_NO\\Payment # // Generates a random bank account number echo $faker->bankAccountNumber(); // \"NO3246764709816\"","title":"Norwegian Bokm\u00e5l (Norway)"},{"location":"locales/nb_NO/#norwegian-bokmal-norway","text":"","title":"Norwegian Bokm\u00e5l (Norway)"},{"location":"locales/nb_NO/#fakerprovidernb_nomobilenumber","text":"// Generates a random Norwegian mobile phone number echo $faker->mobileNumber(); // \"+4799988777\" echo $faker->mobileNumber(); // \"999 88 777\" echo $faker->mobileNumber(); // \"99988777\"","title":"Faker\\Provider\\nb_NO\\MobileNumber"},{"location":"locales/nb_NO/#fakerprovidernb_nopayment","text":"// Generates a random bank account number echo $faker->bankAccountNumber(); // \"NO3246764709816\"","title":"Faker\\Provider\\nb_NO\\Payment"},{"location":"locales/ne_NP/","text":"Nepali (Nepal) # Faker\\Provider\\ne_NP\\Address # // Generates a Nepali district name echo $faker->district(); // Generates a Nepali city name echo $faker->cityName();","title":"Nepali (Nepal)"},{"location":"locales/ne_NP/#nepali-nepal","text":"","title":"Nepali (Nepal)"},{"location":"locales/ne_NP/#fakerproviderne_npaddress","text":"// Generates a Nepali district name echo $faker->district(); // Generates a Nepali city name echo $faker->cityName();","title":"Faker\\Provider\\ne_NP\\Address"},{"location":"locales/nl_BE/","text":"Dutch (Belgium) # Faker\\Provider\\nl_BE\\Payment # echo $faker->bankAccountNumber(); // \"BE74249767372336\" echo $faker->vat(); // \"BE 0123456789\" - Belgian Value Added Tax number echo $faker->vat(false); // \"BE0123456789\" - unspaced Belgian Value Added Tax number Faker\\Provider\\nl_BE\\Person # echo $faker->rrn(); // \"83051711784\" - Belgian Rijksregisternummer echo $faker->rrn('female'); // \"50032089858\" - Belgian Rijksregisternummer for a female","title":"Dutch (Belgium)"},{"location":"locales/nl_BE/#dutch-belgium","text":"","title":"Dutch (Belgium)"},{"location":"locales/nl_BE/#fakerprovidernl_bepayment","text":"echo $faker->bankAccountNumber(); // \"BE74249767372336\" echo $faker->vat(); // \"BE 0123456789\" - Belgian Value Added Tax number echo $faker->vat(false); // \"BE0123456789\" - unspaced Belgian Value Added Tax number","title":"Faker\\Provider\\nl_BE\\Payment"},{"location":"locales/nl_BE/#fakerprovidernl_beperson","text":"echo $faker->rrn(); // \"83051711784\" - Belgian Rijksregisternummer echo $faker->rrn('female'); // \"50032089858\" - Belgian Rijksregisternummer for a female","title":"Faker\\Provider\\nl_BE\\Person"},{"location":"locales/nl_NL/","text":"Dutch (Netherlands) # Faker\\Provider\\nl_NL\\Company # echo $faker->jobTitle(); // \"Houtbewerker\" echo $faker->vat(); // \"NL123456789B01\" - Dutch Value Added Tax number echo $faker->btw(); // \"NL123456789B01\" - Dutch Value Added Tax number (alias) Faker\\Provider\\nl_NL\\Payment # echo $faker->bankAccountNumber(); // \"NL74MNEJ4830302492\" Faker\\Provider\\nl_NL\\Person # echo $faker->idNumber(); // \"111222333\" - Dutch Personal identification number (BSN)","title":"Dutch (Netherlands)"},{"location":"locales/nl_NL/#dutch-netherlands","text":"","title":"Dutch (Netherlands)"},{"location":"locales/nl_NL/#fakerprovidernl_nlcompany","text":"echo $faker->jobTitle(); // \"Houtbewerker\" echo $faker->vat(); // \"NL123456789B01\" - Dutch Value Added Tax number echo $faker->btw(); // \"NL123456789B01\" - Dutch Value Added Tax number (alias)","title":"Faker\\Provider\\nl_NL\\Company"},{"location":"locales/nl_NL/#fakerprovidernl_nlpayment","text":"echo $faker->bankAccountNumber(); // \"NL74MNEJ4830302492\"","title":"Faker\\Provider\\nl_NL\\Payment"},{"location":"locales/nl_NL/#fakerprovidernl_nlperson","text":"echo $faker->idNumber(); // \"111222333\" - Dutch Personal identification number (BSN)","title":"Faker\\Provider\\nl_NL\\Person"},{"location":"locales/pl_PL/","text":"Polish (Poland) # Faker\\Provider\\pl_PL\\Person # // Generates a random PESEL number echo $faker->pesel(); // \"40061451555\" // Generates a random personal identity card number echo $faker->personalIdentityNumber(); // \"AKX383360\" // Generates a random taxpayer identification number (NIP) echo $faker->taxpayerIdentificationNumber(); // '8211575109' Faker\\Provider\\pl_PL\\Company # // Generates a random REGON number echo $faker->regon(); // \"714676680\" // Generates a random local REGON number echo $faker->regonLocal(); // \"15346111382836\" Faker\\Provider\\pl_PL\\Payment # // Generates a random bank name echo $faker->bank(); // \"Narodowy Bank Polski\" // Generates a random bank account number echo $faker->bankAccountNumber(); // \"PL14968907563953822118075816\" Faker\\Provider\\pl_PL\\LicensePlate # <?php // Generates a random Polish civil vehicle registration number echo $faker->licensePlate(); // \"SO 4429E\" echo $faker->licensePlate(false); // \"BKL YP21\" // Generates a random Polish vehicle registration number including civil, army and services plates echo $faker->licensePlate(true); // \"CBY 0874H\", \"HPF N2LV\" // Generates a random Polish vehicle registration number for specific voivodeships echo $faker->licensePlate(false, ['zachodniopomorskie', '\u015bwi\u0119tokrzyskie']); // \"ZGY 35807\" // Generates a random Polish vehicle registration number for specific counties echo $faker->licensePlate(false, ['warmi\u0144sko-mazurskie'], ['nidzicki', 'olecki']); // \"NOE 35807\" // Generates a random Polish license plate of Border Service or Police echo $faker->licensePlate(true, ['services'], ['Stra\u017c Graniczna', 'Policja']); // \"UG 822PC\" // Generates a random Polish army license plate echo $faker->licensePlate(true, ['army']); // \"UG 822PC\"","title":"Polish (Poland)"},{"location":"locales/pl_PL/#polish-poland","text":"","title":"Polish (Poland)"},{"location":"locales/pl_PL/#fakerproviderpl_plperson","text":"// Generates a random PESEL number echo $faker->pesel(); // \"40061451555\" // Generates a random personal identity card number echo $faker->personalIdentityNumber(); // \"AKX383360\" // Generates a random taxpayer identification number (NIP) echo $faker->taxpayerIdentificationNumber(); // '8211575109'","title":"Faker\\Provider\\pl_PL\\Person"},{"location":"locales/pl_PL/#fakerproviderpl_plcompany","text":"// Generates a random REGON number echo $faker->regon(); // \"714676680\" // Generates a random local REGON number echo $faker->regonLocal(); // \"15346111382836\"","title":"Faker\\Provider\\pl_PL\\Company"},{"location":"locales/pl_PL/#fakerproviderpl_plpayment","text":"// Generates a random bank name echo $faker->bank(); // \"Narodowy Bank Polski\" // Generates a random bank account number echo $faker->bankAccountNumber(); // \"PL14968907563953822118075816\"","title":"Faker\\Provider\\pl_PL\\Payment"},{"location":"locales/pl_PL/#fakerproviderpl_pllicenseplate","text":"<?php // Generates a random Polish civil vehicle registration number echo $faker->licensePlate(); // \"SO 4429E\" echo $faker->licensePlate(false); // \"BKL YP21\" // Generates a random Polish vehicle registration number including civil, army and services plates echo $faker->licensePlate(true); // \"CBY 0874H\", \"HPF N2LV\" // Generates a random Polish vehicle registration number for specific voivodeships echo $faker->licensePlate(false, ['zachodniopomorskie', '\u015bwi\u0119tokrzyskie']); // \"ZGY 35807\" // Generates a random Polish vehicle registration number for specific counties echo $faker->licensePlate(false, ['warmi\u0144sko-mazurskie'], ['nidzicki', 'olecki']); // \"NOE 35807\" // Generates a random Polish license plate of Border Service or Police echo $faker->licensePlate(true, ['services'], ['Stra\u017c Graniczna', 'Policja']); // \"UG 822PC\" // Generates a random Polish army license plate echo $faker->licensePlate(true, ['army']); // \"UG 822PC\"","title":"Faker\\Provider\\pl_PL\\LicensePlate"},{"location":"locales/pt_BR/","text":"Portuguese (Brazil) # Faker\\Provider\\pt_BR\\Address # // Generates a random region name echo $faker->region(); // 'Nordeste' // Generates a random region abbreviation echo $faker->regionAbbr(); // 'NE' Faker\\Provider\\pt_BR\\PhoneNumber # echo $faker->areaCode(); // 21 echo $faker->cellphone(); // 9432-5656 echo $faker->landline(); // 2654-3445 echo $faker->phone(); // random landline, 8-digit or 9-digit cellphone number // Using the phone functions with a false argument returns unformatted numbers echo $faker->cellphone(false); // 74336667 // cellphone() has a special second argument to add the 9th digit. Ignored if generated a Radio number echo $faker->cellphone(true, true); // 98983-3945 or 7343-1290 // Using the \"Number\" suffix adds area code to the phone echo $faker->cellphoneNumber(); // (11) 98309-2935 echo $faker->landlineNumber(false); // 3522835934 echo $faker->phoneNumber(); // formatted, random landline or cellphone (obeying the 9th digit rule) echo $faker->phoneNumberCleared(); // not formatted, random landline or cellphone (obeying the 9th digit rule) Faker\\Provider\\pt_BR\\Payment # echo $faker->bankAccountNumber(); // \"BR0506997786328342762640926MO\" Faker\\Provider\\pt_BR\\Person # // The name generator may include double first or double last names, plus title and suffix echo $faker->name(); // 'Sr. Luis Adriano Sep\u00falveda Filho' // Valid document generators have a boolean argument to remove formatting echo $faker->cpf(); // '145.343.345-76' echo $faker->cpf(false); // '45623467866' echo $faker->rg(); // '84.405.736-3' echo $faker->rg(false); // '844057363' Faker\\Provider\\pt_BR\\Company # // Generates a Brazilian formatted and valid CNPJ echo $faker->cnpj(); // '23.663.478/0001-24' echo $faker->cnpj(false); // '23663478000124'","title":"Portuguese (Brazil)"},{"location":"locales/pt_BR/#portuguese-brazil","text":"","title":"Portuguese (Brazil)"},{"location":"locales/pt_BR/#fakerproviderpt_braddress","text":"// Generates a random region name echo $faker->region(); // 'Nordeste' // Generates a random region abbreviation echo $faker->regionAbbr(); // 'NE'","title":"Faker\\Provider\\pt_BR\\Address"},{"location":"locales/pt_BR/#fakerproviderpt_brphonenumber","text":"echo $faker->areaCode(); // 21 echo $faker->cellphone(); // 9432-5656 echo $faker->landline(); // 2654-3445 echo $faker->phone(); // random landline, 8-digit or 9-digit cellphone number // Using the phone functions with a false argument returns unformatted numbers echo $faker->cellphone(false); // 74336667 // cellphone() has a special second argument to add the 9th digit. Ignored if generated a Radio number echo $faker->cellphone(true, true); // 98983-3945 or 7343-1290 // Using the \"Number\" suffix adds area code to the phone echo $faker->cellphoneNumber(); // (11) 98309-2935 echo $faker->landlineNumber(false); // 3522835934 echo $faker->phoneNumber(); // formatted, random landline or cellphone (obeying the 9th digit rule) echo $faker->phoneNumberCleared(); // not formatted, random landline or cellphone (obeying the 9th digit rule)","title":"Faker\\Provider\\pt_BR\\PhoneNumber"},{"location":"locales/pt_BR/#fakerproviderpt_brpayment","text":"echo $faker->bankAccountNumber(); // \"BR0506997786328342762640926MO\"","title":"Faker\\Provider\\pt_BR\\Payment"},{"location":"locales/pt_BR/#fakerproviderpt_brperson","text":"// The name generator may include double first or double last names, plus title and suffix echo $faker->name(); // 'Sr. Luis Adriano Sep\u00falveda Filho' // Valid document generators have a boolean argument to remove formatting echo $faker->cpf(); // '145.343.345-76' echo $faker->cpf(false); // '45623467866' echo $faker->rg(); // '84.405.736-3' echo $faker->rg(false); // '844057363'","title":"Faker\\Provider\\pt_BR\\Person"},{"location":"locales/pt_BR/#fakerproviderpt_brcompany","text":"// Generates a Brazilian formatted and valid CNPJ echo $faker->cnpj(); // '23.663.478/0001-24' echo $faker->cnpj(false); // '23663478000124'","title":"Faker\\Provider\\pt_BR\\Company"},{"location":"locales/pt_PT/","text":"Portuguese (Portugal) # Faker\\Provider\\pt_PT\\Person # // Generates a random taxpayer identification number (in portuguese - N\u00famero de Identifica\u00e7\u00e3o Fiscal NIF) echo $faker->taxpayerIdentificationNumber(); // '165249277' Faker\\Provider\\pt_PT\\Payment # echo $faker->bankAccountNumber(); // \"PT54276294522742987131120\"","title":"Portuguese (Portugal)"},{"location":"locales/pt_PT/#portuguese-portugal","text":"","title":"Portuguese (Portugal)"},{"location":"locales/pt_PT/#fakerproviderpt_ptperson","text":"// Generates a random taxpayer identification number (in portuguese - N\u00famero de Identifica\u00e7\u00e3o Fiscal NIF) echo $faker->taxpayerIdentificationNumber(); // '165249277'","title":"Faker\\Provider\\pt_PT\\Person"},{"location":"locales/pt_PT/#fakerproviderpt_ptpayment","text":"echo $faker->bankAccountNumber(); // \"PT54276294522742987131120\"","title":"Faker\\Provider\\pt_PT\\Payment"},{"location":"locales/ro_MD/","text":"Romanian (Moldova) # Faker\\Provider\\ro_MD\\Payment # // Generates a random bank account number echo $faker->bankAccountNumber(); // \"MD83BQW1CKMUW34HBESDP3A8\"","title":"Romanian (Moldova)"},{"location":"locales/ro_MD/#romanian-moldova","text":"","title":"Romanian (Moldova)"},{"location":"locales/ro_MD/#fakerproviderro_mdpayment","text":"// Generates a random bank account number echo $faker->bankAccountNumber(); // \"MD83BQW1CKMUW34HBESDP3A8\"","title":"Faker\\Provider\\ro_MD\\Payment"},{"location":"locales/ro_RO/","text":"Romanian (Romania) # Faker\\Provider\\ro_RO\\Payment # // Generates a random bank account number echo $faker->bankAccountNumber(); // \"RO55WRJE3OE8X3YQI7J26U1E\" Faker\\Provider\\ro_RO\\Person # // Generates a random male name prefix/title echo $faker->prefixMale(); // \"ing.\" // Generates a random female name prefix/title echo $faker->prefixFemale(); // \"d-na.\" // Generates a random male first name echo $faker->firstNameMale(); // \"Adrian\" // Generates a random female first name echo $faker->firstNameFemale(); // \"Miruna\" // Generates a random Personal Numerical Code (CNP) echo $faker->cnp(); // \"2800523081231\" // Valid option values: // $gender: null (random), male, female // $dateOfBirth (1800+): null (random), Y-m-d, Y-m (random day), Y (random month and day) // i.e. '1981-06-16', '2015-03', '1900' // $county: 2 letter ISO 3166-2:RO county codes and B1, B2, B3, B4, B5, B6 for Bucharest's 6 sectors // $isResident true/false flag if the person resides in Romania echo $faker->cnp($gender = null, $dateOfBirth = null, $county = null, $isResident = true); Faker\\Provider\\ro_RO\\PhoneNumber # // Generates a random toll-free phone number echo $faker->tollFreePhoneNumber(); // \"0800123456\" // Generates a random premium-rate phone number echo $faker->premiumRatePhoneNumber(); // \"0900123456\"","title":"Romanian (Romania)"},{"location":"locales/ro_RO/#romanian-romania","text":"","title":"Romanian (Romania)"},{"location":"locales/ro_RO/#fakerproviderro_ropayment","text":"// Generates a random bank account number echo $faker->bankAccountNumber(); // \"RO55WRJE3OE8X3YQI7J26U1E\"","title":"Faker\\Provider\\ro_RO\\Payment"},{"location":"locales/ro_RO/#fakerproviderro_roperson","text":"// Generates a random male name prefix/title echo $faker->prefixMale(); // \"ing.\" // Generates a random female name prefix/title echo $faker->prefixFemale(); // \"d-na.\" // Generates a random male first name echo $faker->firstNameMale(); // \"Adrian\" // Generates a random female first name echo $faker->firstNameFemale(); // \"Miruna\" // Generates a random Personal Numerical Code (CNP) echo $faker->cnp(); // \"2800523081231\" // Valid option values: // $gender: null (random), male, female // $dateOfBirth (1800+): null (random), Y-m-d, Y-m (random day), Y (random month and day) // i.e. '1981-06-16', '2015-03', '1900' // $county: 2 letter ISO 3166-2:RO county codes and B1, B2, B3, B4, B5, B6 for Bucharest's 6 sectors // $isResident true/false flag if the person resides in Romania echo $faker->cnp($gender = null, $dateOfBirth = null, $county = null, $isResident = true);","title":"Faker\\Provider\\ro_RO\\Person"},{"location":"locales/ro_RO/#fakerproviderro_rophonenumber","text":"// Generates a random toll-free phone number echo $faker->tollFreePhoneNumber(); // \"0800123456\" // Generates a random premium-rate phone number echo $faker->premiumRatePhoneNumber(); // \"0900123456\"","title":"Faker\\Provider\\ro_RO\\PhoneNumber"},{"location":"locales/ru_RU/","text":"Russian (Russia) # Faker\\Provider\\ru_RU\\Payment # // Generates a Russian bank name (based on list of real russian banks) echo $faker->bank(); // \"\u041e\u0422\u041f \u0411\u0430\u043d\u043a\" // Generate a Russian Tax Payment Number for Company echo $faker->inn10(); // 7813540735 // Generate a Russian Tax Code for Company echo $faker->kpp(); // 781301001","title":"Russian (Russia)"},{"location":"locales/ru_RU/#russian-russia","text":"","title":"Russian (Russia)"},{"location":"locales/ru_RU/#fakerproviderru_rupayment","text":"// Generates a Russian bank name (based on list of real russian banks) echo $faker->bank(); // \"\u041e\u0422\u041f \u0411\u0430\u043d\u043a\" // Generate a Russian Tax Payment Number for Company echo $faker->inn10(); // 7813540735 // Generate a Russian Tax Code for Company echo $faker->kpp(); // 781301001","title":"Faker\\Provider\\ru_RU\\Payment"},{"location":"locales/sk_SK/","text":"Slovak (Slovakia) # Faker\\Provider\\sk_SK\\Payment # // Generates a random bank account number echo $faker->bankAccountNumber(); // \"SK6413578310194914530894\"","title":"Slovak (Slovakia)"},{"location":"locales/sk_SK/#slovak-slovakia","text":"","title":"Slovak (Slovakia)"},{"location":"locales/sk_SK/#fakerprovidersk_skpayment","text":"// Generates a random bank account number echo $faker->bankAccountNumber(); // \"SK6413578310194914530894\"","title":"Faker\\Provider\\sk_SK\\Payment"},{"location":"locales/sl_SI/","text":"Slovenian (Slovenia) # Faker\\Provider\\sl_SI\\Payment # // Generates a random bank account number echo $faker->bankAccountNumber(); // \"SI54033367976489565\"","title":"Slovenian (Slovenia)"},{"location":"locales/sl_SI/#slovenian-slovenia","text":"","title":"Slovenian (Slovenia)"},{"location":"locales/sl_SI/#fakerprovidersl_sipayment","text":"// Generates a random bank account number echo $faker->bankAccountNumber(); // \"SI54033367976489565\"","title":"Faker\\Provider\\sl_SI\\Payment"},{"location":"locales/sr_Cyrl_RS/","text":"Serbian (Cyrillic, Serbia) # Faker\\Provider\\sr_Cyrl_RS\\Payment # // Generates a random bank account number echo $faker->bankAccountNumber(); // \"RS67272104347913868782\"","title":"Serbian (Cyrillic, Serbia)"},{"location":"locales/sr_Cyrl_RS/#serbian-cyrillic-serbia","text":"","title":"Serbian (Cyrillic, Serbia)"},{"location":"locales/sr_Cyrl_RS/#fakerprovidersr_cyrl_rspayment","text":"// Generates a random bank account number echo $faker->bankAccountNumber(); // \"RS67272104347913868782\"","title":"Faker\\Provider\\sr_Cyrl_RS\\Payment"},{"location":"locales/sr_Latn_RS/","text":"Serbian (Latin, Serbia) # Faker\\Provider\\sr_Latn_RS\\Payment # // Generates a random bank account number echo $faker->bankAccountNumber(); // \"RS67272104347913868782\"","title":"Serbian (Latin, Serbia)"},{"location":"locales/sr_Latn_RS/#serbian-latin-serbia","text":"","title":"Serbian (Latin, Serbia)"},{"location":"locales/sr_Latn_RS/#fakerprovidersr_latn_rspayment","text":"// Generates a random bank account number echo $faker->bankAccountNumber(); // \"RS67272104347913868782\"","title":"Faker\\Provider\\sr_Latn_RS\\Payment"},{"location":"locales/sr_RS/","text":"Serbian (Serbia) # Faker\\Provider\\sr_RS\\Payment # // Generates a random bank account number echo $faker->bankAccountNumber(); // \"RS67272104347913868782\"","title":"Serbian (Serbia)"},{"location":"locales/sr_RS/#serbian-serbia","text":"","title":"Serbian (Serbia)"},{"location":"locales/sr_RS/#fakerprovidersr_rspayment","text":"// Generates a random bank account number echo $faker->bankAccountNumber(); // \"RS67272104347913868782\"","title":"Faker\\Provider\\sr_RS\\Payment"},{"location":"locales/sv_SE/","text":"Swedish (Sweden) # Faker\\Provider\\sv_SE\\Payment # // Generates a random bank account number echo $faker->bankAccountNumber(); // \"SE5018548608468284909192\" Faker\\Provider\\sv_SE\\Person # // Generates a valid Swedish personal identity number (in Swedish - Personnummer) echo $faker->personalIdentityNumber(); // '950910-0799' // Since the numbers are different for male and female persons, optionally you can specify gender. echo $faker->personalIdentityNumber('female'); // '950910-0781'","title":"Swedish (Sweden)"},{"location":"locales/sv_SE/#swedish-sweden","text":"","title":"Swedish (Sweden)"},{"location":"locales/sv_SE/#fakerprovidersv_sepayment","text":"// Generates a random bank account number echo $faker->bankAccountNumber(); // \"SE5018548608468284909192\"","title":"Faker\\Provider\\sv_SE\\Payment"},{"location":"locales/sv_SE/#fakerprovidersv_seperson","text":"// Generates a valid Swedish personal identity number (in Swedish - Personnummer) echo $faker->personalIdentityNumber(); // '950910-0799' // Since the numbers are different for male and female persons, optionally you can specify gender. echo $faker->personalIdentityNumber('female'); // '950910-0781'","title":"Faker\\Provider\\sv_SE\\Person"},{"location":"locales/tr_TR/","text":"Turkish (Turkey) # Faker\\Provider\\tr_TR\\Payment # echo $faker->bankAccountNumber(); // \"TR10701615J9D2W2U91686NSE1\" Faker\\Provider\\tr_TR\\Person # //Generates a valid Turkish identity number (in Turkish - T.C. Kimlik No) echo $faker->tcNo(); // '55300634882'","title":"Turkish (Turkey)"},{"location":"locales/tr_TR/#turkish-turkey","text":"","title":"Turkish (Turkey)"},{"location":"locales/tr_TR/#fakerprovidertr_trpayment","text":"echo $faker->bankAccountNumber(); // \"TR10701615J9D2W2U91686NSE1\"","title":"Faker\\Provider\\tr_TR\\Payment"},{"location":"locales/tr_TR/#fakerprovidertr_trperson","text":"//Generates a valid Turkish identity number (in Turkish - T.C. Kimlik No) echo $faker->tcNo(); // '55300634882'","title":"Faker\\Provider\\tr_TR\\Person"},{"location":"locales/uk_UA/","text":"Ukrainian (Ukraine) # Faker\\Provider\\uk_UA\\Payment # // Generates an Ukraine bank name (based on list of real Ukraine banks) echo $faker->bank(); // \"\u041e\u0449\u0430\u0434\u0431\u0430\u043d\u043a\"","title":"Ukrainian (Ukraine)"},{"location":"locales/uk_UA/#ukrainian-ukraine","text":"","title":"Ukrainian (Ukraine)"},{"location":"locales/uk_UA/#fakerprovideruk_uapayment","text":"// Generates an Ukraine bank name (based on list of real Ukraine banks) echo $faker->bank(); // \"\u041e\u0449\u0430\u0434\u0431\u0430\u043d\u043a\"","title":"Faker\\Provider\\uk_UA\\Payment"},{"location":"locales/zh_Hans_CN/","text":"Chinese (Simplified, China) # Faker\\Provider\\zh_CN\\Payment # // Generates a random bank name (based on list of real chinese banks) echo $faker->bank(); // '\u4e2d\u56fd\u5efa\u8bbe\u94f6\u884c'","title":"Chinese (Simplified, China)"},{"location":"locales/zh_Hans_CN/#chinese-simplified-china","text":"","title":"Chinese (Simplified, China)"},{"location":"locales/zh_Hans_CN/#fakerproviderzh_cnpayment","text":"// Generates a random bank name (based on list of real chinese banks) echo $faker->bank(); // '\u4e2d\u56fd\u5efa\u8bbe\u94f6\u884c'","title":"Faker\\Provider\\zh_CN\\Payment"},{"location":"locales/zh_Hant_TW/","text":"Chinese (Traditional, Taiwan) # Faker\\Provider\\zh_TW\\Person # // Generates a random personal identify number echo $faker->personalIdentityNumber(); // A223456789 Faker\\Provider\\zh_TW\\Company # // Generates a random VAT / Company Tax number echo $faker->VAT(); //23456789","title":"Chinese (Traditional, Taiwan)"},{"location":"locales/zh_Hant_TW/#chinese-traditional-taiwan","text":"","title":"Chinese (Traditional, Taiwan)"},{"location":"locales/zh_Hant_TW/#fakerproviderzh_twperson","text":"// Generates a random personal identify number echo $faker->personalIdentityNumber(); // A223456789","title":"Faker\\Provider\\zh_TW\\Person"},{"location":"locales/zh_Hant_TW/#fakerproviderzh_twcompany","text":"// Generates a random VAT / Company Tax number echo $faker->VAT(); //23456789","title":"Faker\\Provider\\zh_TW\\Company"}]}